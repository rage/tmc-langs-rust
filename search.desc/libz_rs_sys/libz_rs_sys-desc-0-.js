searchState.loadedDescShard("libz_rs_sys", 0, "This crate is a C API for zlib-rs. The API is broadly …\nCalculates the adler32 checksum of a sequence of bytes.\nCombines the checksum of two slices into one.\nCombines the checksum of two slices into one.\nCalculates the adler32 checksum of a sequence of bytes.\nspace at comment (only when reading header)\npointer to zero-terminated comment or NULL\nCompresses <code>source</code> into <code>dest</code>, and writes the final deflated …\nCompresses <code>source</code> into <code>dest</code>, and writes the final deflated …\nReturns an upper bound on the compressed size after …\nCalculates the crc32 checksum of a sequence of bytes.\nCombines the checksum of two slices into one.\nCombines the checksum of two slices into one.\nCalculates the crc32 checksum of a sequence of bytes.\nCompresses as much data as possible, and stops when the …\nReturns an upper bound on the compressed size after …\nSets the destination stream as a complete copy of the …\nDeallocates all dynamically allocated data structures for …\nReturns the sliding dictionary being maintained by deflate.\nInitializes the state for compression\nInitializes the state for compression\nDynamically update the compression level and compression …\nReturns the number of bytes and bits of output that have …\nInserts bits in the deflate output stream.\nThis function is equivalent to <code>deflateEnd</code> followed by …\nInitializes the compression dictionary from the given byte …\nProvides gzip header information for when a gzip stream is …\nFine tune deflate’s internal compression parameters.\ntrue when done reading gzip header (not used when writing …\npointer to extra field or NULL if none\nextra field length (valid if extra != NULL)\nspace at extra (only when reading header)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe CRC table used by the crc32 checksum algorithm.\ngzip header information passed to and from zlib routines. …\ntrue if there was or will be a header crc\nDecompresses as much data as possible, and stops when the …\nDecompresses as much data as possible, and stops when the …\nDeallocates all dynamically allocated data structures for …\nInitializes the state for decompression\nSets the destination stream as a complete copy of the …\nDeallocates all dynamically allocated data structures for …\nReturns the sliding dictionary being maintained by inflate.\nRequests that gzip header information be stored in the …\nInitializes the state for decompression\nInitializes the state for decompression\nGives information about the current location of the input …\nInserts bits in the inflate input stream.\nEquivalent to <code>inflateEnd</code> followed by <code>inflateInit_</code>, but …\nThis function is the same as <code>inflateReset</code>, but it also …\nInitializes the decompression dictionary from the given …\nSkips invalid compressed data until\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\npointer to zero-terminated file name or NULL\nspace at name (only when reading header)\noperating system\ntrue if compressed data believed to be text\nmodification time\nInflates <code>source</code> into <code>dest</code>, and writes the final inflated …\nextra flags (not used when writing a gzip file)\nGet the error message for an error. This could be the …\nThe current stream state\nReturn flags indicating compile-time options.\nThe version of the zlib library.")