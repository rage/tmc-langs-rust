searchState.loadedDescShard("crypto_mac", 0, "This crate provides trait for Message Authentication Code …\nError type for signaling invalid key length for MAC …\nKey for an algorithm that implements <code>NewMac</code>.\nKey size in bytes with which cipher guaranteed to be …\nThe <code>Mac</code> trait defines methods for a Message Authentication …\nError type for signaling failed MAC verification\nInstantiate a <code>Mac</code> algorithm.\n<code>Output</code> is a thin wrapper around bytes array which provides …\nOutput size of the [<code>Mac</code>]\nType aliases for many constants.\nObtain the result of a <code>Mac</code> computation as a <code>Output</code> and …\nObtain the result of a <code>Mac</code> computation as a <code>Output</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the MAC tag/code value as a byte array.\nInitialize new MAC instance from key with fixed size.\nCreate a new MAC <code>Output</code>.\nInitialize new MAC instance from key with variable size.\nReset <code>Mac</code> instance.\nUpdate MAC state with the given data.\nCheck if tag/code value is correct for the processed input.\nThe type-level bit 0.\nThe type-level bit 1.\nThe type-level signed integer 0.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing this bit.\nInstantiates a singleton representing the integer 0.")