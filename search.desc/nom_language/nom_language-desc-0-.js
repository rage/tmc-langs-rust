searchState.loadedDescShard("nom_language", 0, "Langage parsing combinators for the nom parser combinators …\nCombinators to parse expressions with operator precedence.\nIndicates which character was expected by the <code>char</code> function\nStatic string added by the <code>context</code> function\nError kind given by various nom parsers\nThis error type accumulates errors and their position when …\nError context for <code>VerboseError</code>\nTransforms a <code>VerboseError</code> into a trace with input position …\nList of errors accumulated by <code>VerboseError</code>, containing the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new error from an input position and an external …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAssociativity for binary operators.\nA binary operator.\nA binary operation.\nLeft associative.\nParser implementation for the <code>separated_list1</code> combinator\nA single evaluation step.\nA postfix operation.\nA prefix operation.\nRight associative.\nAn unary operator.\nRuns the inner parser and transforms the result into a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApplies a parser multiple times separated by another …\nParses an expression with operator precedence.\nRuns the inner parser and transforms the result into an …")