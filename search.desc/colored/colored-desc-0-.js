searchState.loadedDescShard("colored", 0, "Coloring terminal so simple, you already know how to do it …\nThe 8 standard colors.\nA string that may have color and/or style applied to it.\nThe trait that enables something to be given color.\nA combinatorial style such as bold, italics, dimmed, etc.\nGet the current background color applied.\nCheck if the current style has one of <code>Styles</code> switched on.\nA couple of functions to enable and disable coloring.\nCustom colors support.\nGet the current background color applied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the colored string has no color or styling.\nGet the current <code>Style</code> which can be check if it contains a …\nThe persistent <code>ShouldColorize</code>.\nA flag for whether coloring should occur.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReads environment variables and checks if output is a tty …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUse this to force colored to ignore the environment and …\nUse this to force colored to ignore the environment and …\nReturns if the current coloring is expected.\nRemove the manual override and let the environment decide …\nRemove the manual override and let the environment decide …\nCustom color structure, it will generate a true color in …\nBlue\nReturns the argument unchanged.\nGreen\nCalls <code>U::from(self)</code>.\nCreate a new custom color\nRed")