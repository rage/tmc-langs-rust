searchState.loadedDescShard("xml", 0, "This crate currently provides an almost XML …\nUS-ASCII\nUTF-8 fallback, but can be any 8-bit encoding\nCharacter encoding used for parsing\nISO-8859-1\nNot determined yet, may be sniffed to be anything\nUnknown endianness yet, will be sniffed\nBig-Endian\nLittle-Endian\nExplicitly UTF-8 only\nContains XML attributes manipulation types and functions.\nContains common types and functions used throughout the …\nContains functions for performing XML special characters …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains XML qualified names manipulation types and …\nContains namespace manipulation types and functions.\nContains high-level interface for a pull-based XML parser.\nContains high-level interface for an events-based XML …\nA borrowed version of an XML attribute.\nAn owned version of an XML attribute.\nReturns a borrowed <code>Attribute</code> out of this owned one.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttribute name.\nAttribute name.\nCreates a borrowed attribute using the provided borrowed …\nCreates a new owned attribute using the provided owned …\nCreates an owned attribute out of this borrowed one.\nAttribute value.\nAttribute value.\nGet the position in the document corresponding to the …\nRepresents a position inside some textual document.\nXML version 1.0.\nXML version 1.1.\nXML version enumeration.\nAdvances the position in a line\nAdvances the position in a line to the next tab position\nColumn, counting from 0\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the given character is a name character (…\nChecks whether the given character is a name start …\nChecks whether the given character is a white space …\nChecks whether the given string is compound only by white …\nIs it a valid character in XML 1.0\nIs it a valid character in XML 1.1\nIs it a valid character in XML 1.1 but not part of the …\nCreates a new position initialized to the beginning of the …\nAdvances the position to the beginning of the next line\nReturns the current position or a position corresponding …\nRow, counting from 0\nPerforms escaping of common XML characters inside an …\nPerforms escaping of common XML characters inside PCDATA.\nRepresents a qualified XML name.\nAn owned variant of <code>Name</code>.\nA wrapper around <code>Name</code> whose <code>Display</code> implementation prints …\nConstructs a borrowed <code>Name</code> based on this owned name.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParses the given string slice into a qualified name.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a new <code>Name</code> instance representing plain local name.\nReturns a new <code>OwnedName</code> instance representing a plain …\nA local name, e.g. <code>string</code> in <code>xsi:string</code>.\nA local name, e.g. <code>string</code> in <code>xsi:string</code>.\nA namespace URI, e.g. <code>http://www.w3.org/2000/xmlns/</code>.\nA namespace URI, e.g. <code>http://www.w3.org/2000/xmlns/</code>.\nReturns an optional namespace by reference, equivalen to …\nA name prefix, e.g. <code>xsi</code> in <code>xsi:string</code>.\nA name prefix, e.g. <code>xsi</code> in <code>xsi:string</code>.\nReturns an optional prefix by reference, equivalent to …\nReturns either a prefix of this name or …\nReturns a new <code>Name</code> instance with the given local name and …\nReturns a new <code>Name</code> instance representing a qualified name …\nReturns a new <code>OwnedName</code> instance representing a qualified …\nReturns a structure which can be displayed with <code>std::fmt</code> …\nReturns an owned variant of the qualified name.\nReturns a correct XML representation of this local name …\nA wrapper around <code>NamespaceStack</code> which implements <code>Extend</code> …\nDesignates an empty namespace URI, which is equivalent to …\nDesignates the absence of prefix in a qualified name.\nDesignates prefix for namespace definitions.\nDesignates the standard URI for <code>xmlns</code> prefix.\nDesignates prefix for a namespace containing several …\nDesignates the standard URI for <code>xml</code> prefix.\nNamespace is a map from prefixes to namespace URIs.\nAn alias for iterator type for namespace mappings …\nNamespace stack is a sequence of namespaces.\nAn iterator over mappings from prefixes to URIs in a …\nA type alias for a pair of <code>(prefix, uri)</code> values returned …\nBorrowed namespace for the writer\nReturns an object which implements <code>Extend</code> using …\nChecks whether this namespace mapping contains the given …\nReturns a namespace stack with default items in it.\nReturns an empty namespace.\nReturns an empty namespace stack.\nPuts a mapping into this namespace forcefully.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nQueries the namespace for the given prefix.\nPerforms a search for the given prefix in the whole stack.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether this namespace is empty.\nChecks whether this namespace is essentially empty, that …\nNamespace mappings contained in a namespace.\nReturns an iterator over all mappings in this namespace …\nBorrows the topmost namespace immutably, leaving the stack …\nBorrows the topmost namespace mutably, leaving the stack …\nRemoves the topmost namespace in this stack.\nAdds an empty namespace to the top of this stack.\nPuts a mapping into this namespace.\nPuts a mapping into the topmost namespace in this stack.\nPuts a mapping into the topmost namespace if this stack …\nCombines this stack of namespaces into a single namespace.\nRemoves the topmost namespace in this stack.\nDenotes CDATA content.\nDenotes character data outside of tags.\nDenotes a comment.\nDenotes to the end of the document stream.\nDenotes an end of an XML element.\nContains the error value\nAn XML parsing error.\nFailure reason\nA wrapper around an <code>std::io::Read</code> instance which provides …\nAn iterator over XML events created from some type …\nReader/writer reported an error\nContains the success value\nParser configuration structure. <strong>There are more config </strong>…\nBackwards-compatible extension of <code>ParserConfig</code>, which will …\nDenotes an XML processing instruction.\nA result type yielded by <code>XmlReader</code>.\nCorresponds to XML document declaration.\nDenotes a beginning of an XML element.\nThis is an ill-formed XML document\nThe document ended while they were elements/comments/etc. …\nThe document contains bytes that are not allowed in UTF-8 …\nDenotes a chunk of whitespace outside of tags.\nAn element of an XML input stream.\nAdds a new entity mapping and returns an updated config …\nAllows invalid documents. There should be only a single …\nAllows invalid documents. There should be only a single …\nDocuments with multiple root elements are ill-formed\nObtains a writer event from this reader event.\nSee <code>ParserConfig</code> fields docs for details\nSee <code>ParserConfig</code> fields docs for details\nWhether or not should CDATA be converted to characters. …\nSee <code>ParserConfig</code> fields docs for details\nSee <code>ParserConfig</code> fields docs for details\nWhether or not should sequential <code>Characters</code> events be …\nSet encoding from the MIME type. Important for HTTP …\nRead character encoding from <code>Content-Type</code> header. Set this …\nCreates an XML reader with this configuration.\nCreates an XML reader with this configuration.\nA map of extra entities recognized by the parser. Default …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA convenience method to create an <code>XmlReader</code> from a string …\nSee <code>ParserConfig</code> fields docs for details\nSee <code>ParserConfig</code> fields docs for details\nWhether or not should comments be omitted. Default is true.\nSee <code>ParserConfig</code> fields docs for details\nSee <code>ParserConfig</code> fields docs for details\nWhether or not the parser should ignore the end of stream. …\nAllow <code>&lt;?xml encoding=&quot;bogus&quot;?&gt;</code>\nAllow <code>&lt;?xml encoding=&quot;bogus&quot;?&gt;</code>\nAllow <code>&lt;?xml encoding=&quot;…&quot;&gt;</code> to contain unsupported …\nSee <code>ParserConfig</code> fields docs for details\nWhether or not whitespace at the root level of the …\nWhether or not whitespace at the root level of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps this <code>EventReader</code>, returning the underlying reader.\nUnwraps the iterator, returning the internal <code>EventReader</code>.\nFailure reason\nMax number of bytes in each attribute\nMax number of bytes in each attribute\nMax number of bytes in each attribute\nMax number of attributes per element\nMax number of attributes per element\nMax number of attributes per element\nMaximum length of strings reprsenting characters, …\nMaximum length of strings reprsenting characters, …\nMaximum length of strings reprsenting characters, …\nEntities can expand into other entities this many times …\nEntities can expand into other entities this many times …\nEntities can expand into other entities this many times …\nAbort if custom entities create a string longer than this\nAbort if custom entities create a string longer than this\nAbort if custom entities create a string longer than this\nMaximum length of tag name or attribute name\nMaximum length of tag name or attribute name\nMaximum length of tag name or attribute name\nCreates a new reader, consuming the given stream.\nReturns a new config with default values.\nCreate extended configuration struct\nCreates a new reader with the provded configuration, …\nPulls and returns next XML event from the stream.\nSet if you got one in the HTTP header (see <code>content_type</code>)\nSet if you got one in the HTTP header\nUse this encoding as the default. Necessary for UTF-16 …\nReturns the position of the last event produced by the …\nSee <code>ParserConfig</code> fields docs for details\nSee <code>ParserConfig</code> fields docs for details\nWhether or not non-unicode entity references get replaced …\nSkips all XML events until the next end tag at the current …\nAccess underlying reader\nAccess the underlying reader\nAccess underlying reader\nAccess the underlying reader\nSee <code>ParserConfig</code> fields docs for details\nSee <code>ParserConfig</code> fields docs for details\nWhether or not should whitespace in textual events be …\nSee <code>ParserConfig</code> fields docs for details\nSee <code>ParserConfig</code> fields docs for details\nWhether or not should whitespace be converted to …\nA list of attributes associated with the element.\nProcessing instruction content.\nXML document encoding.\nProcessing instruction target.\nQualified name of the element.\nQualified name of the element.\nContents of the namespace mapping at this point of the …\nXML standalone declaration.\nXML version.\nDocument declaration has already been written to the …\nEmitter configuration structure.\nThe name of the last opening element is not equal to the …\nEnd element name is not specified when it is needed, for …\nContains the error value\nAn error which may be returned by <code>XmlWriter</code> when writing …\nA wrapper around an <code>std::io::Write</code> instance which emits …\nAn I/O error occured in the underlying <code>Write</code> instance.\nThe name of the last opening element is not available.\nContains the success value\nA result type yielded by <code>XmlWriter</code>.\nSee <code>ParserConfig</code> fields docs for details\nWhether or not to automatically insert leading and …\nSee <code>ParserConfig</code> fields docs for details\nWhether or not to emit CDATA events as plain characters. …\nCreates an XML writer with this configuration.\nContains <code>XmlEvent</code> datatype, instances of which are …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSee <code>ParserConfig</code> fields docs for details\nA string which will be used for a single level of …\nReturns a mutable reference to the underlying <code>Writer</code>.\nReturns an immutable reference to the underlying <code>Writer</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps this <code>EventWriter</code>, returning the underlying writer.\nSee <code>ParserConfig</code> fields docs for details\nWhether or not to keep element names to support <code>EndElement</code> …\nSee <code>ParserConfig</code> fields docs for details\nLine separator used to separate lines in formatted output. …\nCreates a new <code>EventWriter</code> out of an <code>std::io::Write</code> …\nCreates an emitter configuration with default values.\nCreates a new <code>EventWriter</code> out of an <code>std::io::Write</code> …\nSee <code>ParserConfig</code> fields docs for details\nWhether or not to convert elements with empty content to …\nSee <code>ParserConfig</code> fields docs for details\nWhether or not to automatically insert spaces before the …\nWhether or not characters in output events will be …\nSee <code>ParserConfig</code> fields docs for details\nWhether or not the emitted document should be indented. …\nWrites the next piece of XML document according to the …\nSee <code>ParserConfig</code> fields docs for details\nWhether or not to write XML document declaration at the …\nDenotes CDATA content.\nDenotes character data outside of tags.\nDenotes a comment.\nDenotes an end of an XML element.\nA builder for a closing element event.\nDenotes an XML processing instruction.\nCorresponds to XML document declaration.\nDenotes a beginning of an XML element.\nA builder for a starting element event.\nA part of an XML output stream.\nSets an attribute value of this element to the given …\nReturns a CDATA event.\nReturns a regular characters (PCDATA) event.\nReturns a comment event.\nAdds a default namespace mapping to the current namespace …\nReturns a builder for an closing element.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets the name of this closing element.\nAdds a namespace to the current namespace context.\nReturns an writer event for a processing instruction.\nReturns a builder for a starting element.\nA list of attributes associated with the element.\nProcessing instruction content.\nXML document encoding.\nProcessing instruction target.\nQualified name of the element.\nOptional qualified name of the element.\nContents of the namespace mapping at this point of the …\nXML standalone declaration.\nXML version.")