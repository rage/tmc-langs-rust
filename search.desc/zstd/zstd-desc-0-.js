searchState.loadedDescShard("zstd", 0, "Rust binding to the zstd library.\nDefault compression level. Default compression level.\nCompress and decompress individual blocks.\nTrain a dictionary from various sources.\nCompress and decompress Zstd streams.\nAllows to compress independently multiple blocks of data.\nAllows to decompress independently multiple blocks of data.\nCompresses a block of data and returns the compressed …\nCompresses a block of data and returns the compressed …\nCompresses a single block of data to the given destination …\nCompress a single block of data to the given destination …\nDecompresses a block of data and returns the decompressed …\nDecompress a block of data, and return the result in a …\nDeompress a single block of data to the given destination …\nDeompress a single block of data to the given destination …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new zstd compressor\nCreates a new zstd decompressor.\nCreates a new zstd compressor, using the given dictionary.\nCreates a new zstd decompressor, using the given …\nCompression dictionary.\nPrepared dictionary for decompression\nPrepared dictionary for compression\nReturns reference to <code>CDict</code> inner object\nReturns reference to <code>DDict</code> inner object\nCreates a prepared dictionary for compression.\nCreate a prepared dictionary for decompression.\nWraps the <code>ZSTD_createDDict_byReference()</code> function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTrain a dictionary from a big continuous chunk of data.\nTrain a dict from a list of files.\nTrain a dictionary from multiple samples.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate prepared dictionary for compression\nCreate prepared dictionary for decompression\nDecompress from the given source as if using a <code>Decoder</code>.\nCompress all data from the given source as if using an …\nDecompress from the given source as if using a <code>Decoder</code>.\nCompress all data from the given source as if using an …\nRaw in-memory stream compression/decompression.\nImplement pull-based <code>Read</code> trait for both compressing and …\nImplement push-based <code>Write</code> trait for both compressing and …\nWrappers around raw operations implementing …\nA compression parameter.\nA decompression parameter.\nAn in-memory decoder for streams of data.\nAn in-memory encoder for streams of data.\nSee <code>FrameFormat</code>.\nWrapper around an input buffer.\nDummy operation that just copies its input to the output.\nRepresents an abstract compression/decompression operation.\nWrapper around an output buffer.\nDescribes the result of an operation.\nReturns a new <code>InBuffer</code> around the given slice.\nReturns a new <code>OutBuffer</code> around the given slice.\nReturns the part of this buffer that was written to.\nNumber of bytes read from the input.\nNumber of bytes written to the output.\nFinishes the operation, writing any footer if necessary.\nFlushes any internal buffer, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new decoder.\nCreates a new encoder.\nPrepares the operation for a new frame.\nNumber of bytes expected for next input.\nPerforms a single step of this operation.\nPerforms a single step of this operation.\nSets a decompression parameter for this decoder.\nSets a compression parameter for this encoder.\nCreates a new decoder initialized with the given …\nCreates a new encoder initialized with the given …\nCreates a new decoder, using an existing <code>DecoderDictionary</code>.\nCreates a new encoder using an existing <code>EncoderDictionary</code>.\nA decoder that decompress input data from another <code>Read</code>.\nAn encoder that compress input data from another <code>Read</code>.\nReturn the inner <code>Read</code>.\nReturn the inner <code>Read</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquire a mutable reference to the underlying reader.\nAcquire a mutable reference to the underlying reader.\nAcquire a reference to the underlying reader.\nAcquire a reference to the underlying reader.\nControls whether zstd should include a content checksum at …\nEnables or disabled storing of the contentsize\nEnables or disables storing of the dict id.\nEnables or disabled expecting the 4-byte magic header\nEnables or disable the magic bytes at the beginning of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnables multithreaded compression\nCreates a new decoder.\nCreates a new encoder.\nRecommendation for the size of the output buffer.\nRecommendation for the size of the output buffer.\nSets this <code>Decoder</code> to stop after the first frame.\nCreates a new decoder around a <code>BufRead</code>.\nCreates a new encoder around a <code>BufRead</code>.\nCreates a new decoder, using an existing dictionary.\nCreates a new encoder, using an existing dictionary.\nCreates a new decoder, using an existing <code>DecoderDictionary</code>.\nCreates a new encoder, using an existing <code>EncoderDictionary</code>.\nA wrapper around an <code>Encoder&lt;W&gt;</code> that finishes the stream on …\nA decoder that decompress and forward data to another …\nAn encoder that compress and forward data to another …\nReturns a wrapper around <code>self</code> that will finish the stream …\nAttemps to finish the stream.\n<strong>Required</strong>: Finishes the stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAcquires a mutable reference to the underlying writer.\nAcquires a mutable reference to the underlying writer.\nAcquires a mutable reference to the underlying writer.\nAcquires a reference to the underlying writer.\nAcquires a reference to the underlying writer.\nAcquires a reference to the underlying writer.\nControls whether zstd should include a content checksum at …\nEnables or disabled storing of the contentsize\nEnables or disables storing of the dict id.\nEnables or disable the magic bytes at the beginning of …\nEnables or disabled expecting the 4-byte magic header\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner <code>Write</code>.\nEnables multithreaded compression\nCreates a new encoder.\nCreates a new decoder.\nReturns an encoder that will finish the stream on drop.\nReturn a recommendation for the size of data to write at …\nReturn a recommendation for the size of data to write at …\n<strong>Required</strong>: Attempts to finish the stream.\nCreates a new encoder, using an existing dictionary.\nCreates a new decoder, using an existing dictionary.\nCreates a new encoder, using an existing prepared …\nCreates a new decoder, using an existing prepared …\nImplements the <code>Read</code> API around an <code>Operation</code>.\nImplements the <code>Write</code> API around an <code>Operation</code>.\nEnds the stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner reader.\nReturn the wrapped <code>Writer</code> and <code>Operation</code>.\nCreates a new <code>Reader</code>.\nCreates a new <code>Writer</code>.\nGives a reference to the inner operation.\nReturns a mutable reference to the underlying operation.\nGives a mutable reference to the inner operation.\nReturns a reference to the underlying reader.\nReturns a mutable reference to the underlying reader.\nSets <code>self</code> to stop after the first decoded frame.\nGives a reference to the inner writer.\nGives a mutable reference to the inner writer.")