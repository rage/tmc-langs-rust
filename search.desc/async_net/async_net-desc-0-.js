searchState.loadedDescShard("async_net", 0, "Async networking primitives for TCP/UDP/Unix communication.\nConverts or resolves addresses to <code>SocketAddr</code> values.\nA stream of incoming TCP connections.\nA TCP server, listening for connections.\nA TCP connection.\nA UDP socket.\nAccepts a new incoming connection.\nCreates a new <code>TcpListener</code> bound to the given address.\nCreates a new <code>UdpSocket</code> bound to the given address.\nGets the value of the <code>SO_BROADCAST</code> option for this socket.\nCreates a TCP connection to the specified address.\nConnects the UDP socket to an address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a stream of incoming connections.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExecutes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.\nReturns the local address this stream is bound to.\nReturns the local address this listener is bound to.\nReturns the local address this socket is bound to.\nGets the value of the <code>IP_MULTICAST_LOOP</code> option for this …\nGets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …\nGets the value of the <code>IP_MULTICAST_TTL</code> option for this …\nGets the value of the <code>TCP_NODELAY</code> option for this socket.\nReceives data without removing it from the queue.\nReceives a single datagram from the connected address …\nReceives a single datagram message without removing it …\nReturns the remote address this stream is connected to.\nReturns the remote address this socket is connected to.\nReceives a single datagram message from the connected …\nReceives a single datagram message.\nConverts or resolves addresses to <code>SocketAddr</code> values.\nSends data to the connected address.\nSends data to the given address.\nSets the value of the <code>SO_BROADCAST</code> option for this socket.\nSets the value of the <code>IP_MULTICAST_LOOP</code> option for this …\nSets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …\nSets the value of the <code>IP_MULTICAST_TTL</code> option for this …\nSets the value of the <code>TCP_NODELAY</code> option for this socket.\nSets the value of the <code>IP_TTL</code> option for this socket.\nSets the value of the <code>IP_TTL</code> option for this socket.\nSets the value of the <code>IP_TTL</code> option for this socket.\nShuts down the read half, write half, or both halves of …\nGets the value of the <code>IP_TTL</code> option for this socket.\nGets the value of the <code>IP_TTL</code> option for this socket.\nGets the value of the <code>IP_TTL</code> option for this socket.\nUnix domain sockets.\nA stream of incoming Unix connections.\nA Unix datagram socket.\nA Unix server, listening for connections.\nA Unix connection.\nAccepts a new incoming connection.\nCreates a new <code>UnixListener</code> bound to the given path.\nCreates a new <code>UnixDatagram</code> bound to the given address.\nCreates a Unix connection to given path.\nConnects the Unix datagram socket to the given address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a stream of incoming connections.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the local address this socket is connected to.\nReturns the local address this listener is bound to.\nReturns the local address this socket is bound to.\nCreates a pair of connected Unix sockets.\nCreates a pair of connected Unix datagram sockets.\nReturns the remote address this socket is connected to.\nReturns the remote address this socket is connected to.\nReceives data from the connected address.\nReceives data from an address.\nSends data to the connected address.\nSends data to the given address.\nShuts down the read half, write half, or both halves of …\nShuts down the read half, write half, or both halves of …\nCreates a Unix datagram socket not bound to any address.")