searchState.loadedDescShard("zopfli", 0, "A reimplementation of the Zopfli compression library in …\nThe type of data blocks to generate for a DEFLATE stream.\nThe raw DEFLATE stream format, as defined in RFC 1951.\nA DEFLATE encoder powered by the Zopfli algorithm that …\nSelect the most space-efficient block types for the input …\nThe error type for I/O operations of the <code>Write</code> trait.\nA list specifying general categories of I/O error.\nCompressed blocks with fixed Huffman codes (BTYPE=01).\nThe output file format to use to store data compressed …\nThe gzip file format, as defined in RFC 1952.\nA Gzip encoder powered by the Zopfli algorithm, that …\nThis operation was interrupted.\nOptions for the Zopfli compression algorithm.\nAn error that does not fall under any other I/O error kind.\nNon-compressed blocks (BTYPE=00).\nA trait for objects which are byte-oriented sinks, modeled …\nAn error returned when an operation could not be completed …\nThe zlib file format, as defined in RFC 1950.\nA Zlib encoder powered by the Zopfli algorithm, that …\nCreates a “by reference” adapter for this instance of …\nCreates a “by reference” adapter for this instance of …\nCompresses data from a source with the Zopfli algorithm, …\nEncodes any pending chunks of data and writes them to the …\nEncodes any pending chunks of data and writes them to the …\nEncodes any pending chunks of data and writes them to the …\nFlush this output stream, ensuring that all intermediately …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum amount of times to rerun forward and backward pass …\nStop after rerunning forward and backward pass this many …\nReturns the corresponding <code>ErrorKind</code> for this error.\nMaximum amount of blocks to split into (0 for unlimited, …\nCreates a new Zopfli DEFLATE encoder that will operate …\nCreates a new Gzip encoder that will operate according to …\nCreates a new Zlib encoder that will operate according to …\nCreates a new Zopfli DEFLATE encoder that operates …\nCreates a new Gzip encoder that operates according to the …\nCreates a new Zlib encoder that operates according to the …\nWrite a buffer into this writer, returning how many bytes …\nAttempts to write an entire buffer into this writer.\nAttempts to write an entire buffer into this writer.")