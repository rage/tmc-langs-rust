searchState.loadedDescShard("smol", 0, "A small and fast async runtime.\nAsync adapter for I/O types.\nAn async executor.\nA thread-local executor.\nA spawned task.\nA future or stream that emits timed events.\nRuns blocking I/O on a thread pool.\nAccepts a new incoming UDS stream connection.\nAccepts a new incoming TCP connection.\nCreates a timer that emits an event once after the given …\nCreates a timer that emits an event once at the given time …\nCreates a UDS listener bound to the specified path.\nCreates a TCP listener bound to the specified address.\nCreates a UDP socket bound to the specified address.\nCreates a UDS datagram socket bound to the specified path.\nBlocks the current thread on a future, processing I/O …\nCancels the task and waits for it to stop running.\nCreates a TCP connection to the specified address.\nCreates a UDS stream connected to the specified path.\nDetaches the task to let it keep running in the background.\nConverts this task into a <code>FallibleTask</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCombinators for the <code>Future</code> trait.\nGets a mutable reference to the blocking I/O handle.\nGets a mutable reference to the inner I/O handle.\nGets a reference to the inner I/O handle.\nReturns a stream of incoming TCP connections.\nReturns a stream of incoming UDS connections.\nCreates a timer that emits events periodically.\nCreates a timer that emits events periodically, starting …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the inner blocking I/O handle.\nUnwraps the inner I/O handle.\nTools and combinators for I/O.\nReturns <code>true</code> if there are no unfinished tasks.\nReturns <code>true</code> if there are no unfinished tasks.\nReturns <code>true</code> if the current task is finished.\nGet the metadata associated with this task.\nCreates a timer that will never fire.\nCreates a new executor.\nCreates a single-threaded executor.\nWraps a blocking I/O handle into the async <code>Unblock</code> …\nCreates an async I/O handle.\nCreates an unnamed pair of connected Unix datagram sockets.\nCreates an unnamed pair of connected UDS stream sockets.\nReceives a single datagram message from the connected peer …\nReads data from the stream without removing it from the …\nReceives a single datagram message without removing it …\nPins a variable of type <code>T</code> on the stack and rebinds it as …\nPolls the I/O handle for readability.\nPolls the I/O handle for writability.\nTraits <code>Future</code>, <code>Stream</code>, <code>AsyncRead</code>, <code>AsyncWrite</code>, <code>AsyncBufRead</code>,\nPerforms a read operation asynchronously.\nPerforms a read operation asynchronously.\nWaits until the I/O handle is readable.\nWaits until the I/O handle is readable.\nUnwraps <code>Poll&lt;T&gt;</code> or returns <code>Pending</code>.\nReceives a single datagram message from the connected peer.\nReceives data from the connected peer.\nReceives data from the socket.\nReceives a single datagram message.\nRuns the executor until the given future completes.\nRuns the executor until the given future completes.\nSends data to the connected peer.\nSends data to the connected peer.\nSends data to the specified address.\nSends data to the specified address.\nSets the timer to emit an en event once after the given …\nSets the timer to emit an event once at the given time …\nSets the timer to emit events periodically.\nSets the timer to emit events periodically, starting at …\nSpawns a task onto the global executor (single-threaded by …\nSpawns a task onto the executor.\nSpawns a task onto the executor.\nSpawns many tasks onto the executor.\nSpawns many tasks onto the executor.\nCombinators for the <code>Stream</code> trait.\nRuns a single task.\nRuns a single task.\nAttempts to run a task if at least one is scheduled.\nAttempts to run a task if at least one is scheduled.\nRuns blocking code on a thread pool.\nCreates a UDS datagram socket not bound to any address.\nIndicates whether or not this timer will ever fire.\nWraps a blocking I/O handle into the async <code>Unblock</code> …\nPerforms a blocking operation on the I/O handle.\nWaits until the I/O handle is writable.\nWaits until the I/O handle is writable.\nPerforms a write operation asynchronously.\nPerforms a write operation asynchronously.\nThe channel is closed.\nThe channel is empty and closed.\nThe channel is empty but not closed.\nThe channel is full but not closed.\nThe receiving side of a channel.\nA future returned by <code>Receiver::recv()</code>.\nAn error returned from <code>Receiver::recv()</code>.\nA future returned by <code>Sender::send()</code>.\nAn error returned from <code>Sender::send()</code>.\nThe sending side of a channel.\nAn error returned from <code>Receiver::try_recv()</code>.\nAn error returned from <code>Sender::try_send()</code>.\nA <code>Receiver</code> that prevents the channel from not being closed.\nA <code>Sender</code> that prevents the channel from not being closed.\nCreates a bounded channel.\nReturns the channel capacity if it’s bounded.\nReturns the channel capacity if it’s bounded.\nCloses the channel.\nCloses the channel.\nDowngrade the sender to a weak reference.\nDowngrade the receiver to a weak reference.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwraps the message that couldn’t be sent.\nUnwraps the message that couldn’t be sent.\nReturns <code>true</code> if the channel is closed.\nReturns <code>true</code> if the channel is closed.\nReturns <code>true</code> if the channel is closed.\nReturns <code>true</code> if the channel is empty and closed.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is empty.\nReturns <code>true</code> if the channel is empty but not closed.\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the channel is full.\nReturns <code>true</code> if the channel is full but not closed.\nReturns the number of messages in the channel.\nReturns the number of messages in the channel.\nReturns the number of receivers for the channel.\nReturns the number of receivers for the channel.\nReceives a message from the channel.\nReceives a message from the channel using the blocking …\nSends a message into the channel.\nSends a message into this channel using the blocking …\nReturns the number of senders for the channel.\nReturns the number of senders for the channel.\nAttempts to receive a message from the channel.\nAttempts to send a message into the channel.\nCreates an unbounded channel.\nUpgrade the <code>WeakSender</code> into a <code>Sender</code>.\nUpgrade the <code>WeakReceiver</code> into a <code>Receiver</code>.\nA builder for creating directories with configurable …\nAn entry in a directory.\nAn open file on the filesystem.\nA structure representing a type of file with accessors for …\nMetadata information about a file.\nA builder for opening files with configurable options.\nRepresentation of the various permissions on a file.\nA stream of entries in a directory.\nReturns the last access time of this metadata.\nConfigures the option for append mode.\nReturns the canonical form of a path.\nCopies a file to a new location.\nOpens a file in write-only mode.\nCreates a directory with the configured options.\nConfigures the option for creating a new file if it doesn…\nCreates a directory.\nCreates a directory and its parent directories if they are …\nConfigures the option for creating a new file or failing …\nReturns the creation time listed in this metadata.\nReturns the bare name of this entry without the leading …\nReads the file type for this entry.\nReturns the file type for this metadata.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a hard link on the filesystem.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this metadata is for a directory. The …\nTests whether this file type represents a directory. The …\nReturns <code>true</code> if this metadata is for a regular file. The …\nTests whether this file type represents a regular file. …\nReturns <code>true</code> if this metadata is for a symbolic link.\nTests whether this file type represents a symbolic link. …\nReturns the size of the file, in bytes, this metadata is …\nReads metadata for a path.\nReads the metadata for this entry.\nReads the file’s metadata.\nReturns the last modification time listed in this metadata.\nCreates a blank set of options.\nCreates a blank set of options.\nOpens a file in read-only mode.\nOpens a file with the configured options.\nReturns the full path to this entry.\nReturns the permissions of the file this metadata is for.\nReads the entire contents of a file as raw bytes.\nConfigures the option for read mode.\nReturns a stream of entries in a directory.\nReads a symbolic link and returns the path it points to.\nReads the entire contents of a file as a string.\nReturns <code>true</code> if these permissions describe a readonly …\nSets the option for recursive mode.\nRemoves an empty directory.\nRemoves a directory and all of its contents.\nRemoves a file.\nRenames a file or directory to a new location.\nTruncates or extends the file.\nChanges the permissions of a file or directory.\nChanges the permissions on the file.\nModifies the readonly flag for this set of permissions. If …\nReads metadata for a path without following symbolic links.\nSynchronizes OS-internal buffered contents and metadata to …\nSynchronizes OS-internal buffered contents to disk.\nConfigures the option for truncating the previous file.\nUnix-specific extensions.\nWrites a slice of bytes as the new contents of a file.\nConfigures the option for write mode.\nUnix-specific extensions to <code>DirBuilder</code>.\nUnix-specific extension methods for <code>DirEntry</code>.\nUnix-specific extensions for <code>fs::FileType</code>.\nUnix-specific extensions to <code>fs::Metadata</code>.\nUnix-specific extensions to <code>OpenOptions</code>.\nUnix-specific extensions to <code>fs::Permissions</code>.\nReturns the last access time of the file, in seconds since …\nReturns the last access time of the file, in nanoseconds …\nReturns the block size for filesystem I/O.\nReturns the number of blocks allocated to the file, in …\nReturns the last status change time of the file, in …\nReturns the last status change time of the file, in …\nPasses custom flags to the <code>flags</code> argument of <code>open</code>.\nReturns the ID of the device containing the file.\nCreates a new instance of <code>Permissions</code> from the given set …\nReturns the group ID of the owner of this file.\nReturns the underlying <code>d_ino</code> field in the contained <code>dirent</code> …\nReturns the inode number.\nReturns <code>true</code> if this file type is a block device.\nReturns <code>true</code> if this file type is a char device.\nReturns <code>true</code> if this file type is a fifo.\nReturns <code>true</code> if this file type is a socket.\nSets the mode to create new directories with.\nSets the mode bits that a new file will be created with.\nReturns the underlying raw <code>st_mode</code> bits that contain the …\nReturns the rights applied to this file.\nReturns the last modification time of the file, in seconds …\nReturns the last modification time of the file, in …\nReturns the number of hard links pointing to this file.\nReturns the device ID of this file (if it is a special …\nSets the underlying raw bits for this set of permissions.\nReturns the total size of this file in bytes.\nCreates a new symbolic link on the filesystem.\nReturns the user ID of the owner of this file.\nType alias for …\nType alias for <code>Pin&lt;Box&lt;dyn Future&lt;Output = T&gt; + &#39;static&gt;&gt;</code>.\nFuture for the <code>FutureExt::catch_unwind()</code> method.\nA future represents an asynchronous computation obtained …\nExtension trait for <code>Future</code>.\nFuture for the <code>or()</code> function and the <code>FutureExt::or()</code> …\nThe type of value produced on completion.\nFuture for the <code>pending()</code> function.\nFuture for the <code>poll_fn()</code> function.\nFuture for the <code>poll_once()</code> function.\nFuture for the <code>race()</code> function and the <code>FutureExt::race()</code> …\nFuture for the <code>ready()</code> function.\nFuture for the <code>try_zip()</code> function.\nFuture for the <code>yield_now()</code> function.\nFuture for the <code>zip()</code> function.\nBlocks the current thread on a future.\nBoxes the future and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nCatches panics while polling the future.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the result of the future that completes first, …\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nCreates a future that is always pending.\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nCreates a future from a function returning <code>Poll</code>.\nPolls a future just once and returns an <code>Option</code> with the …\nReturns the result of the future that completes first, …\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nCreates a future that resolves to the provided value.\nJoins two fallible futures, waiting for both to complete …\nWakes the current task and returns <code>Poll::Pending</code> once.\nJoins two futures, waiting for both to complete.\nA socket address could not be bound because the address is …\nA nonexistent interface was requested or the requested …\nAn entity already exists, often a file.\nProgram argument list too long.\nAsserts that a type implementing <code>std::io</code> traits can be …\nA wrapper around a type that implements <code>AsyncRead</code> or …\nRead bytes asynchronously.\nExtension trait for <code>AsyncBufRead</code>.\nRead bytes asynchronously.\nExtension trait for <code>AsyncRead</code>.\nSeek bytes asynchronously.\nExtension trait for <code>AsyncSeek</code>.\nWrite bytes asynchronously.\nExtension trait for <code>AsyncWrite</code>.\nBlocks on all async I/O operations and implements <code>std::io</code> …\nType alias for <code>Pin&lt;Box&lt;dyn AsyncRead + Send + &#39;static&gt;&gt;</code>.\nType alias for <code>Pin&lt;Box&lt;dyn AsyncWrite + Send + &#39;static&gt;&gt;</code>.\nThe operation failed because a pipe was closed.\nAdds buffering to a reader.\nAdds buffering to a writer.\nReader for the <code>AsyncReadExt::bytes()</code> method.\nReader for the <code>AsyncReadExt::chain()</code> method.\nFuture for the <code>AsyncWriteExt::close()</code> method.\nThe connection was aborted (terminated) by the remote …\nThe connection was refused by the remote server.\nThe connection was reset by the remote server.\nCross-device or cross-filesystem (hard) link or rename.\nSets the offset to the current position plus the specified …\nGives an in-memory buffer a cursor for reading and writing.\nDeadlock (avoided).\nA non-empty directory was specified where an empty …\nReader for the <code>empty()</code> function.\nSets the offset to the size of this object plus the …\nContains the error value\nThe error type for I/O operations of the <code>Read</code>, <code>Write</code>, <code>Seek</code>…\nA list specifying general categories of I/O error.\nExecutable file is busy.\nFile larger than allowed or supported.\nLoop in the filesystem or IO subsystem; often, too many …\nFilesystem quota was exceeded.\nFuture for the <code>AsyncBufReadExt::fill_buf()</code> method.\nFuture for the <code>AsyncWriteExt::flush()</code> method.\nThe remote host is not reachable.\nThis operation was interrupted.\nData not valid for the operation were encountered.\nA filename was invalid.\nA parameter was incorrect.\nThe filesystem object is, unexpectedly, a directory.\nStream for the <code>AsyncBufReadExt::lines()</code> method.\nThe system’s networking is down.\nThe network containing the remote host is not reachable.\nA filesystem object is, unexpectedly, not a directory.\nThe network operation failed because it was not connected …\nAn entity was not found, often a file.\nSeek on unseekable file.\nContains the success value\nA custom error that does not fall under any other I/O …\nAn operation could not be completed, because it failed to …\nThe operation lacked the necessary privileges to complete.\nFuture for the <code>AsyncReadExt::read_exact()</code> method.\nFuture for the <code>AsyncReadExt::read()</code> method.\nThe read half returned by <code>split()</code>.\nFuture for the <code>AsyncBufReadExt::read_line()</code> method.\nThe filesystem or storage medium is read-only, but a write …\nFuture for the <code>AsyncReadExt::read_to_end()</code> method.\nFuture for the <code>AsyncReadExt::read_to_string()</code> method.\nFuture for the <code>AsyncBufReadExt::read_until()</code> method.\nFuture for the <code>AsyncReadExt::read_vectored()</code> method.\nReader for the <code>repeat()</code> function.\nResource is busy.\nA specialized <code>Result</code> type for I/O operations.\nEnumeration of possible methods to seek within an I/O …\nFuture for the <code>AsyncSeekExt::seek()</code> method.\nWriter for the <code>sink()</code> function.\nStream for the <code>AsyncBufReadExt::split()</code> method.\nStale network file handle.\nSets the offset to the provided number of bytes.\nThe underlying storage (typically, a filesystem) is full.\nReader for the <code>AsyncReadExt::take()</code> method.\nThe I/O operation’s timeout expired, causing it to be …\nToo many (hard) links to the same filesystem object.\nAn error returned when an operation could not be completed …\nThis operation is unsupported on this platform.\nThe operation needs to block to complete, but the blocking …\nFuture for the <code>AsyncWriteExt::write_all()</code> method.\nFuture for the <code>AsyncWriteExt::write()</code> method.\nThe write half returned by <code>split()</code>.\nFuture for the <code>AsyncWriteExt::write_vectored()</code> method.\nAn error returned when an operation could not be completed …\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nReturns a reference to the internal buffer.\nReturns a reference to the internal buffer.\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCreates an adapter which will chain this stream with …\nCloses the writer.\nAttempt to shutdown the I/O handle.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nThe context we are using to poll the future.\nCopies the entire contents of a reader into a writer.\nAttempt to downcast the custom boxed error to <code>E</code>.\nCreates an empty reader.\nReturns the contents of the internal buffer, filling it …\nFlushes the stream to ensure that all buffered contents …\nShows a human-readable description of the <code>ErrorKind</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>ErrorKind</code> into an <code>Error</code>.\nConverts <code>TryReserveError</code> to an error with …\nConverts a <code>alloc::ffi::NulError</code> into a <code>Error</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of an <code>Error</code> from a particular OS …\nReturns a mutable reference to the inner error wrapped by …\nGets a mutable reference to the inner I/O handle.\nGets a mutable reference to the async I/O handle.\nGets a mutable reference to the underlying reader.\nGets a mutable reference to the underlying writer.\nGets a mutable reference to the underlying buffer.\nGets a mutable reference to the underlying reader.\nGets mutable references to the underlying readers.\nReturns a reference to the inner error wrapped by this …\nGets a reference to the inner I/O handle.\nGets a reference to the async I/O handle.\nGets a reference to the underlying reader.\nGets a reference to the underlying writer.\nGets a reference to the underlying buffer.\nGets a reference to the underlying reader.\nGets references to the underlying readers.\nThe actual reader/writer we are wrapping.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Error</code>, returning its inner error (if any).\nExtracts the inner I/O handle.\nExtracts the inner async I/O handle.\nUnwraps the buffered reader, returning the underlying …\nUnwraps the buffered writer, returning the underlying …\nUnwraps the cursor, returning the underlying buffer.\nUnwraps the adapter, returning the underlying reader.\nUnwraps the adapter, returning the underlying readers.\nReturns the corresponding <code>ErrorKind</code> for this error.\nReturns an error representing the last OS error which …\nReturns the number of bytes before this adapter will …\nReturns a stream over the lines of this byte stream.\nCreates a new I/O error from a known kind of error as well …\nWraps an I/O handle implementing <code>std::io</code> traits.\nWraps an I/O handle implementing <code>AsyncRead</code> or <code>AsyncWrite</code> …\nWraps an async I/O handle into a blocking interface.\nCreates a buffered reader with the default buffer capacity.\nCreates a buffered writer with the default buffer capacity.\nCreates a cursor for an in-memory buffer.\nCreates a new I/O error from an arbitrary error payload.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nSeeks to an offset, in bytes, in the underlying reader.\nSeek to the offset, in bytes, in the underlying writer.\nPoll this <code>AsyncAsSync</code> for some function.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nReturns the current position of this cursor.\nReturns the OS error that this error represents (if any).\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nCreates an infinite reader that reads the same byte …\nSeeks to a new position in a byte stream.\nPuts a limit on the number of bytes.\nSets the position of this cursor.\nCreates a writer that consumes and drops all data.\nSplits a stream into <code>AsyncRead</code> and <code>AsyncWrite</code> halves.\nReturns a stream over the contents of this reader split on …\nCreates an adapter which will read at most <code>limit</code> bytes …\nCreates a buffered reader with the specified capacity.\nCreates a buffered writer with the specified buffer …\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nA counter to synchronize multiple tasks at the same time.\nReturned by <code>Barrier::wait()</code> when all tasks have called it.\nAn async mutex.\nA guard that releases the mutex when dropped.\nAn owned guard that releases the mutex when dropped.\nA memory location that can be written to at most once.\nAn async reader-writer lock.\nA guard that releases the read lock when dropped.\nAn owned, reference-counting guard that releases the read …\nA guard that releases the upgradable read lock when …\nAn owned, reference-counting guard that releases the …\nA guard that releases the write lock when dropped.\nAn owned, reference-counted guard that releases the write …\nA counter for limiting the number of concurrent operations.\nA guard that releases the acquired permit.\nAn owned guard that releases the acquired permit.\nWaits for a permit for a concurrent operation.\nWaits for an owned permit for a concurrent operation.\nAdds <code>n</code> additional permits to the semaphore.\nDowngrades into a regular reader guard.\nDowngrades into a regular reader guard.\nDowngrades into a regular reader guard.\nDowngrades into a regular reader guard.\nDowngrades into an upgradable reader guard.\nDowngrades into an upgradable reader guard.\nReturns the argument unchanged.\nCreate a new, initialized <code>OnceCell</code> from an existing value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNamed futures for use with <code>async_lock</code> primitives.\nGet a reference to the inner value, or <code>None</code> if the value …\nReturns a mutable reference to the underlying data.\nGet a mutable reference to the inner value, or <code>None</code> if the …\nReturns a mutable reference to the inner value.\nEither get the value or initialize it with the given …\nEither get the value or initialize it with the given …\nEither get the value or initialize it with the given …\nEither get the value or initialize it with the given …\nGet a reference to the inner value.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the mutex, returning the underlying data.\nConvert this <code>OnceCell</code> into the inner value, if it is …\nUnwraps the lock and returns the inner value.\nTell whether or not the cell is initialized.\nReturns <code>true</code> if this task was the last to call to …\nAcquires the mutex.\nAcquires the mutex and clones a reference to it.\nCreates a new async mutex.\nCreate a new, uninitialized <code>OnceCell</code>.\nCreates a new reader-writer lock.\nCreates a barrier that can block the given number of tasks.\nCreates a new semaphore with a limit of <code>n</code> concurrent …\nAcquires a read lock.\nAcquires an owned, reference-counted read lock.\nTry to set the value of the cell.\nTry to set the value of the cell.\nReturns a reference to the mutex a guard came from.\nReturns a reference to the mutex a guard came from.\nTake the value out of this <code>OnceCell</code>, moving it back to the …\nAttempts to get a permit for a concurrent operation.\nAttempts to get an owned permit for a concurrent operation.\nAttempts to acquire the mutex.\nAttempts to acquire the mutex and clone a reference to it.\nAttempts to acquire a read lock.\nAttempts to acquire an an owned, reference-counted read …\nAttempts to acquire a read lock with the possiblity to …\nAttempts to acquire an owned, reference-counted read lock …\nAttempts to upgrade into a write lock.\nAttempts to upgrade into a write lock.\nAttempts to acquire a write lock.\nAttempts to acquire an owned, reference-counted write lock.\nAcquires a read lock with the possiblity to upgrade to a …\nAcquires an owned, reference-counted read lock with the …\nUpgrades into a write lock.\nUpgrades into a write lock.\nWait for the cell to be initialized, and then return a …\nBlocks the current task until all tasks reach this point.\nWait for the cell to be initialized, and then return a …\nAcquires a write lock.\nAcquires an owned, reference-counted write lock.\nThe future returned by <code>Semaphore::acquire</code>.\nThe future returned by <code>Semaphore::acquire_arc</code>.\nThe future returned by <code>Barrier::wait()</code>.\nThe future returned by <code>Mutex::lock</code>.\nThe future returned by <code>Mutex::lock_arc</code>.\nThe future returned by <code>RwLock::read</code>.\nThe future returned by <code>RwLock::read_arc</code>.\nThe future returned by <code>RwLock::upgradable_read</code>.\nThe future returned by <code>RwLock::upgradable_read_arc</code>.\nThe future returned by <code>RwLockUpgradableReadGuard::upgrade</code>.\nThe future returned by …\nThe future returned by <code>RwLock::write</code>.\nThe future returned by <code>RwLock::write_arc</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn error which can be returned when parsing an IP address …\nConverts or resolves addresses to <code>SocketAddr</code> values.\nThe size of an IPv4 address in bits.\nThe size of an IPv6 address in bits.\nAn IPv4 address representing the broadcast address: …\nBoth the reading and the writing portions of the <code>TcpStream</code> …\nA stream of incoming TCP connections.\nAn IP address, either IPv4 or IPv6.\nAn IPv4 address.\nAn IPv6 address.\nAn IPv4 address with the address pointing to localhost: …\nAn IPv6 address representing localhost: <code>::1</code>.\nThe reading portion of the <code>TcpStream</code> should be shut down.\nPossible values which can be passed to the …\nAn internet socket address, either IPv4 or IPv6.\nAn IPv4 socket address.\nAn IPv6 socket address.\nA TCP server, listening for connections.\nA TCP connection.\nAn IPv4 address representing an unspecified address: …\nAn IPv6 address representing the unspecified address: <code>::</code>\nA UDP socket.\nAn IPv4 address.\nAn IPv4 socket address.\nAn IPv6 address.\nAn IPv6 socket address.\nThe writing portion of the <code>TcpStream</code> should be shut down.\nAccepts a new incoming connection.\nCreates a new <code>TcpListener</code> bound to the given address.\nCreates a new <code>UdpSocket</code> bound to the given address.\nGets the value of the <code>SO_BROADCAST</code> option for this socket.\nCreates a TCP connection to the specified address.\nConnects the UDP socket to an address.\nReturns the flow information associated with this address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopies this address to a new <code>IpAddr::V4</code>.\nReturns the argument unchanged.\nCreates an <code>IpAddr::V4</code> from a four element byte array.\nCreates an <code>IpAddr::V6</code> from a sixteen element byte array.\nCopies this address to a new <code>IpAddr::V6</code>.\nCreates an <code>IpAddr::V6</code> from an eight element 16-bit array.\nReturns the argument unchanged.\nCreates an <code>Ipv4Addr</code> from a four element byte array.\nUses <code>Ipv4Addr::from_bits</code> to convert a host byte order <code>u32</code> …\nCreates an <code>Ipv6Addr</code> from a sixteen element byte array.\nReturns the argument unchanged.\nCreates an <code>Ipv6Addr</code> from an eight element 16-bit array.\nUses <code>Ipv6Addr::from_bits</code> to convert a host byte order <code>u128</code> …\nReturns the argument unchanged.\nConverts a tuple struct (Into&lt;<code>IpAddr</code>&gt;, <code>u16</code>) into a …\nConverts a <code>SocketAddrV6</code> into a <code>SocketAddr::V6</code>.\nReturns the argument unchanged.\nConverts a <code>SocketAddrV4</code> into a <code>SocketAddr::V4</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a native byte order <code>u32</code> into an IPv4 address.\nConverts a native byte order <code>u128</code> into an IPv6 address.\nReturns a stream of incoming connections.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\nReturns the IP address associated with this socket address.\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this address part of the <code>198.18.0.0/15</code> …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if this is a broadcast address (…\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this address is in a range designated for …\nReturns <code>true</code> if this is an address reserved for …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if the address appears to be globally …\nReturns <code>true</code> if this address is an <code>IPv4</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …\nReturns <code>true</code> if the address is an IPv4-mapped address (…\nReturns <code>true</code> if this address is an <code>IPv6</code> address, and <code>false</code> …\nReturns <code>true</code> if the IP address in this <code>SocketAddr</code> is an …\nReturns <code>true</code> if the address is link-local (<code>169.254.0.0/16</code>).\nReturns <code>true</code> if this is a loopback address.\nReturns <code>true</code> if this is a loopback address (<code>127.0.0.0/8</code>).\nReturns <code>true</code> if this is the loopback address (<code>::1</code>), as …\nReturns <code>true</code> if this is a multicast address.\nReturns <code>true</code> if this is a multicast address (<code>224.0.0.0/4</code>).\nReturns <code>true</code> if this is a multicast address (<code>ff00::/8</code>).\nReturns <code>true</code> if this is a private address.\nReturns <code>true</code> if this address is reserved by IANA for …\nReturns <code>true</code> if this address is part of the Shared Address …\nReturns <code>true</code> if this is a unicast address, as defined by …\nReturns <code>true</code> if the address is a globally routable unicast …\nReturns <code>true</code> if the address is a unicast address with …\nReturns <code>true</code> if this is a unique local address (<code>fc00::/7</code>).\nReturns <code>true</code> for the special ‘unspecified’ address.\nReturns <code>true</code> for the special ‘unspecified’ address (…\nReturns <code>true</code> for the special ‘unspecified’ address (<code>::</code>…\nExecutes an operation of the <code>IP_ADD_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IPV6_ADD_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IP_DROP_MEMBERSHIP</code> type.\nExecutes an operation of the <code>IPV6_DROP_MEMBERSHIP</code> type.\nReturns the local address this stream is bound to.\nReturns the local address this listener is bound to.\nReturns the local address this socket is bound to.\nGets the value of the <code>IP_MULTICAST_LOOP</code> option for this …\nGets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …\nReturns the address’s multicast scope if the address is …\nGets the value of the <code>IP_MULTICAST_TTL</code> option for this …\nCreates a new IPv4 address from four eight-bit octets.\nCreates a new IPv6 address from eight 16-bit segments.\nCreates a new socket address from an IP address and a port …\nCreates a new socket address from an <code>IPv4</code> address and a …\nCreates a new socket address from an <code>IPv6</code> address, a …\nGets the value of the <code>TCP_NODELAY</code> option for this socket.\nReturns the four eight-bit integers that make up this …\nReturns the sixteen eight-bit integers the IPv6 address …\nParse an IP address from a slice of bytes.\nParse an IPv4 address from a slice of bytes.\nParse an IPv6 address from a slice of bytes.\nParse a socket address from a slice of bytes.\nParse an IPv4 socket address from a slice of bytes.\nParse an IPv6 socket address from a slice of bytes.\nReceives data without removing it from the queue.\nReceives a single datagram from the connected address …\nReceives a single datagram message without removing it …\nReturns the remote address this stream is connected to.\nReturns the remote address this socket is connected to.\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nReturns the port number associated with this socket …\nReceives a single datagram message from the connected …\nReceives a single datagram message.\nConverts or resolves addresses to <code>SocketAddr</code> values.\nReturns the scope ID associated with this address.\nReturns the eight 16-bit segments that make up this …\nSends data to the connected address.\nSends data to the given address.\nSets the value of the <code>SO_BROADCAST</code> option for this socket.\nChanges the flow information associated with this socket …\nChanges the IP address associated with this socket address.\nChanges the IP address associated with this socket address.\nChanges the IP address associated with this socket address.\nSets the value of the <code>IP_MULTICAST_LOOP</code> option for this …\nSets the value of the <code>IPV6_MULTICAST_LOOP</code> option for this …\nSets the value of the <code>IP_MULTICAST_TTL</code> option for this …\nSets the value of the <code>TCP_NODELAY</code> option for this socket.\nChanges the port number associated with this socket …\nChanges the port number associated with this socket …\nChanges the port number associated with this socket …\nChanges the scope ID associated with this socket address.\nSets the value of the <code>IP_TTL</code> option for this socket.\nSets the value of the <code>IP_TTL</code> option for this socket.\nSets the value of the <code>IP_TTL</code> option for this socket.\nShuts down the read half, write half, or both halves of …\nConverts an IPv4 address into a <code>u32</code> representation using …\nConverts an IPv6 address into a <code>u128</code> representation using …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IpAddr::V4</code> if it is an …\nConverts this address to an <code>IPv4</code> address if it is either …\nConverts this address to an <code>IPv4</code> address if it’s an …\nConverts this address to an IPv4-compatible <code>IPv6</code> address.\nConverts this address to an IPv4-mapped <code>IPv6</code> address.\nGets the value of the <code>IP_TTL</code> option for this socket.\nGets the value of the <code>IP_TTL</code> option for this socket.\nGets the value of the <code>IP_TTL</code> option for this socket.\nUnix domain sockets.\nA stream of incoming Unix connections.\nAn address associated with a Unix socket.\nA Unix datagram socket.\nA Unix server, listening for connections.\nA Unix connection.\nAccepts a new incoming connection.\nReturns the contents of this address if it is a <code>pathname</code> …\nCreates a new <code>UnixListener</code> bound to the given path.\nCreates a new <code>UnixDatagram</code> bound to the given address.\nCreates a Unix connection to given path.\nConnects the Unix datagram socket to the given address.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>SockAddr</code> with the family <code>AF_UNIX</code> and the …\nReturns a stream of incoming connections.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the address is unnamed.\nReturns the local address this socket is connected to.\nReturns the local address this listener is bound to.\nReturns the local address this socket is bound to.\nCreates a pair of connected Unix sockets.\nCreates a pair of connected Unix datagram sockets.\nReturns the remote address this socket is connected to.\nReturns the remote address this socket is connected to.\nReceives data from the connected address.\nReceives data from an address.\nSends data to the connected address.\nSends data to the given address.\nShuts down the read half, write half, or both halves of …\nShuts down the read half, write half, or both halves of …\nCreates a Unix datagram socket not bound to any address.\nRead bytes asynchronously.\nRead bytes asynchronously.\nSeek bytes asynchronously.\nWrite bytes asynchronously.\nA future represents an asynchronous computation obtained …\nValues yielded by the stream.\nThe type of value produced on completion.\nA stream of values produced asynchronously.\nExtension trait for <code>Future</code>.\nExtension trait for <code>AsyncRead</code>.\nExtension trait for <code>AsyncBufRead</code>.\nExtension trait for <code>AsyncWrite</code>.\nExtension trait for <code>AsyncSeek</code>.\nExtension trait for <code>Stream</code>.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nBoxes the future and changes its type to …\nBoxes the stream and changes its type to …\nBoxes the future and changes its type to <code>dyn Future + &#39;a</code>.\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nBoxes the reader and changes its type to …\nBoxes the writer and changes its type to …\nConverts this <code>AsyncRead</code> into a <code>Stream</code> of bytes.\nCatches panics while polling the future.\nAppends another stream to the end of this one.\nCreates an adapter which will chain this stream with …\nClones all items.\nCloses the writer.\nCollects all items in the stream into a collection.\nTells this buffer that <code>amt</code> bytes have been consumed from …\nConsumes <code>amt</code> buffered bytes.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nEnumerates items, mapping them to <code>(index, item)</code>.\nReturns the contents of the internal buffer, filling it …\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nFlushes the stream to ensure that all buffered contents …\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nFuses the stream so that it stops yielding items after the …\nCalls a closure on each item and passes it on.\nReturns the last item in the stream.\nReturns a stream over the lines of this byte stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nReturns the result of <code>self</code> or <code>other</code> future, preferring <code>self</code>…\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nAttempt to resolve the future to a final value, registering\nA convenience for calling <code>Future::poll()</code> on <code>!</code><code>Unpin</code> types.\nAttempt to close the object.\nAttempt to return the contents of the internal buffer, …\nAttempt to flush the object, ensuring that any buffered …\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nAttempt to read from the <code>AsyncRead</code> into <code>buf</code>.\nAttempt to read from the <code>AsyncRead</code> into <code>bufs</code> using vectored\nAttempt to seek to an offset, in bytes, in a stream.\nAttempt to write bytes from <code>buf</code> into the object.\nAttempt to write bytes from <code>bufs</code> into the object using …\nFinds the index of the first item of the stream for which …\nReturns the result of <code>self</code> or <code>other</code> future, with no …\nMerges with <code>other</code> stream, with no preference for either …\nReads some bytes from the byte stream.\nReads the exact number of bytes required to fill <code>buf</code>.\nReads all bytes and appends them into <code>buf</code> until a newline …\nReads the entire contents and appends them to a <code>Vec</code>.\nReads the entire contents and appends them to a <code>String</code>.\nReads all bytes and appends them into <code>buf</code> until the …\nLike <code>read()</code>, except it reads into a slice of buffers.\nMaps items of the stream to new values using a state value …\nSeeks to a new position in a byte stream.\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nReturns a stream over the contents of this reader split on …\nYields every <code>step</code>th item.\nTakes only the first <code>n</code> items of the stream.\nCreates an adapter which will read at most <code>limit</code> bytes …\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCollects a stream of pairs into a pair of collections.\nWrites some bytes into the byte stream.\nWrites an entire buffer into the byte stream.\nLike <code>write()</code>, except that it writes a slice of buffers.\nZips up two streams into a single stream of pairs.\nA spawned child process.\nA handle to a child process’s standard error (stderr).\nA handle to a child process’s standard input (stdin).\nA handle to a child process’s standard output (stdout).\nA builder for spawning processes.\nDescribes the result of a process after it has terminated.\nThe output of a finished process.\nDescribes what to do with a standard I/O stream for a …\nAdds a single argument to pass to the program.\nAdds multiple arguments to pass to the program.\nReturns the exit code of the process, if any.\nConfigures the working directory for the new process.\nConfigures an environment variable for the new process.\nRemoves all environment variable mappings.\nRemoves an environment variable mapping.\nConfigures multiple environment variables for the new …\nWas termination successful?  Returns a <code>Result</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRedirect command stdout/stderr to our stdout\nConverts a <code>ChildStdin</code> into a <code>Stdio</code>.\nConverts a <code>File</code> into a <code>Stdio</code>.\nConverts a <code>ChildStderr</code> into a <code>Stdio</code>.\nConverts a <code>ChildStdout</code> into a <code>Stdio</code>.\nTakes ownership of a file descriptor and returns a <code>Stdio</code> …\nRedirect command stdout/stderr to our stderr\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the OS-assigned process identifier associated with …\nThe child inherits from the corresponding parent …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert async_process::ChildStdin into std::process::Stdio.\nConvert async_process::ChildStdout into …\nConvert async_process::ChildStderr into …\nForces the child process to exit.\nConfigures whether to kill the process when <code>Child</code> is …\nReturns <code>true</code> if this requires <code>Command</code> to create a new pipe.\nConstructs a new <code>Command</code> for launching <code>program</code>.\nThis stream will be ignored. This is the equivalent of …\nDrops the stdin handle and collects the output of the …\nExecutes the command and collects its output.\nA new pipe should be arranged to connect the parent and …\nConfigures whether to reap the zombie process when <code>Child</code> …\nExecutes the command and returns the <code>Child</code> handle to it.\nDrops the stdin handle and waits for the process to exit.\nExecutes the command, waits for it to exit, and returns …\nThe status (exit code) of the process.\nConfigures the standard error (stderr) for the new process.\nThe handle for reading from the child’s standard error …\nThe data that the process wrote to stderr.\nConfigures the standard input (stdin) for the new process.\nThe handle for writing to the child’s standard input …\nConfigures the standard output (stdout) for the new …\nThe handle for reading from the child’s standard output …\nThe data that the process wrote to stdout.\nWas termination successful? Signal termination is not …\nReturns the exit status if the process has exited.\nUnix-specific extensions.\nUnix-specific extensions to the <code>Command</code> builder.\nSet executable argument\nPerforms all the required setup by this <code>Command</code>, followed …\nSimilar to <code>uid</code>, but sets the group ID of the child …\nSchedules a closure to be run just before the <code>exec</code> …\nSets the child process’s user ID. This translates to a …\nFuture for the <code>StreamExt::all()</code> method.\nFuture for the <code>StreamExt::any()</code> method.\nIterator for the <code>block_on()</code> function.\nType alias for …\nType alias for <code>Pin&lt;Box&lt;dyn Stream&lt;Item = T&gt; + &#39;static&gt;&gt;</code>.\nStream for the <code>StreamExt::chain()</code> method.\nStream for the <code>StreamExt::cloned()</code> method.\nFuture for the <code>StreamExt::collect()</code> method.\nStream for the <code>StreamExt::copied()</code> method.\nFuture for the <code>StreamExt::count()</code> method.\nStream for the <code>StreamExt::cycle()</code> method.\nStream for the <code>empty()</code> function.\nStream for the <code>StreamExt::enumerate()</code> method.\nStream for the <code>StreamExt::filter()</code> method.\nStream for the <code>StreamExt::filter_map()</code> method.\nFuture for the <code>StreamExt::find()</code> method.\nFuture for the <code>StreamExt::find_map()</code> method.\nStream for the <code>StreamExt::flat_map()</code> method.\nStream for the <code>StreamExt::flatten()</code> method.\nFuture for the <code>StreamExt::fold()</code> method.\nFuture for the <code>StreamExt::for_each()</code> method.\nStream for the <code>StreamExt::fuse()</code> method.\nStream for the <code>StreamExt::inspect()</code> method.\nValues yielded by the stream.\nStream for the <code>iter()</code> function.\nFuture for the <code>StreamExt::last()</code> method.\nStream for the <code>StreamExt::map()</code> method.\nFuture for the <code>StreamExt::next()</code> method.\nFuture for the <code>StreamExt::nth()</code> method.\nStream for the <code>once()</code> function.\nStream for the <code>once_future()</code> method.\nStream for the <code>or()</code> function and the <code>StreamExt::or()</code> …\nFuture for the <code>StreamExt::partition()</code> method.\nStream for the <code>pending()</code> function.\nStream for the <code>poll_fn()</code> function.\nFuture for the <code>StreamExt::position()</code> method.\nStream for the <code>race()</code> function and the <code>StreamExt::race()</code> …\nStream for the <code>repeat()</code> function.\nStream for the <code>repeat_with()</code> function.\nStream for the <code>StreamExt::scan()</code> method.\nStream for the <code>StreamExt::skip()</code> method.\nStream for the <code>StreamExt::skip_while()</code> method.\nStream for the <code>StreamExt::step_by()</code> method.\nA stream of values produced asynchronously.\nExtension trait for <code>Stream</code>.\nStream for the <code>StreamExt::take()</code> method.\nStream for the <code>StreamExt::take_while()</code> method.\nStream for the <code>StreamExt::then()</code> method.\nFuture for the <code>StreamExt::try_collect()</code> method.\nFuture for the <code>StreamExt::try_fold()</code> method.\nFuture for the <code>StreamExt::try_for_each()</code> method.\nFuture for the <code>StreamExt::try_next()</code> method.\nStream for the <code>try_unfold()</code> function.\nStream for the <code>unfold()</code> function.\nFuture for the <code>StreamExt::unzip()</code> method.\nStream for the <code>StreamExt::zip()</code> method.\nTests if <code>predicate</code> returns <code>true</code> for all items in the …\nTests if <code>predicate</code> returns <code>true</code> for any item in the stream.\nConverts a stream into a blocking iterator.\nBoxes the stream and changes its type to …\nBoxes the stream and changes its type to <code>dyn Stream + &#39;a</code>.\nAppends another stream to the end of this one.\nClones all items.\nCollects all items in the stream into a collection.\nCopies all items.\nCounts the number of items in the stream.\nRepeats the stream from beginning to end, forever.\nCreates an empty stream.\nEnumerates items, mapping them to <code>(index, item)</code>.\nKeeps items of the stream for which <code>predicate</code> returns <code>true</code>.\nFilters and maps items of the stream using a closure.\nFinds the first item of the stream for which <code>predicate</code> …\nApplies a closure to items in the stream and returns the …\nMaps items to streams and then concatenates them.\nConcatenates inner streams.\nAccumulates a computation over the stream.\nCalls a closure on each item of the stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFuses the stream so that it stops yielding items after the …\nCalls a closure on each item and passes it on.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a stream from an iterator.\nReturns the last item in the stream.\nMaps items of the stream to new values using a closure.\nRetrieves the next item in the stream.\nGets the <code>n</code>th item of the stream.\nCreates a stream that yields a single item.\nCreates a stream that invokes the given future as its …\nMerges two streams, preferring items from <code>stream1</code> whenever …\nMerges with <code>other</code> stream, preferring items from <code>self</code> …\nPartitions items into those for which <code>predicate</code> is <code>true</code> …\nCreates a stream that is always pending.\nCreates a stream from a function returning <code>Poll</code>.\nAttempt to pull out the next value of this stream, …\nA convenience for calling <code>Stream::poll_next()</code> on <code>!</code><code>Unpin</code> …\nFinds the index of the first item of the stream for which …\nMerges two streams, with no preference for either stream …\nMerges with <code>other</code> stream, with no preference for either …\nCreates an infinite stream that yields the same item …\nCreates an infinite stream from a closure that generates …\nMaps items of the stream to new values using a state value …\nReturns the bounds on the remaining length of the stream.\nSkips the first <code>n</code> items of the stream.\nSkips items while <code>predicate</code> returns <code>true</code>.\nYields every <code>step</code>th item.\nTakes only the first <code>n</code> items of the stream.\nTakes items while <code>predicate</code> returns <code>true</code>.\nMaps items of the stream to new values using an async …\nCollects all items in the fallible stream into a …\nAccumulates a fallible computation over the stream.\nCalls a fallible closure on each item of the stream, …\nRetrieves the next item in the stream.\nCreates a stream from a seed value and a fallible async …\nCreates a stream from a seed value and an async closure …\nCollects a stream of pairs into a pair of collections.\nZips up two streams into a single stream of pairs.")