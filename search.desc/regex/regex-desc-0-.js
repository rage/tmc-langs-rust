searchState.loadedDescShard("regex", 0, "This crate provides a library for parsing, compiling, and …\nCaptureLocations is a low level representation of the raw …\nAn iterator that yields all non-overlapping capture groups …\nAn iterator over the names of all possible captures.\nCaptures represents a group of captured strings for a …\nThe compiled program exceeded the set size limit. The …\nAn error that occurred during parsing or compiling a …\nMatch represents a single match of a regex in a haystack.\nAn iterator over all non-overlapping matches for a …\n<code>NoExpand</code> indicates literal string replacement.\nA compiled regular expression for matching Unicode strings.\nA configurable builder for a regular expression.\nMatch multiple (possibly overlapping) regular expressions …\nA configurable builder for a set of regular expressions.\nReplacer describes types that can be used to replace …\nBy-reference adaptor for a <code>Replacer</code>\nA set of matches returned by a regex set.\nAn owned iterator over the set of matches from a regex set.\nA borrowed iterator over the set of matches from a regex …\nYields all substrings delimited by a regular expression …\nYields at most <code>N</code> substrings delimited by a regular …\nAn iterator that yields all capturing matches in the order …\nA syntax error.\nReturns the matched text.\nReturns the original string of this regex.\nConsume the builder and compile the regular expression.\nConsume the builder and compile the regular expressions …\nReturn a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.\nReturn a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.\nMatch regular expressions on arbitrary bytes.\nReturns an empty set of capture locations that can be …\nReturns an iterator over the capture names.\nReturns the capture groups corresponding to the …\nReturns an iterator over all the non-overlapping capture …\nReturns the number of captures.\nThis is like <code>captures</code>, but uses <code>CaptureLocations</code> instead of\nReturns the same as captures, but starts the search at the …\nSet the value for the case insensitive (<code>i</code>) flag.\nSet the value for the case insensitive (<code>i</code>) flag.\nSet the approximate size of the cache used by the DFA.\nSet the approximate size of the cache used by the DFA.\nSet the value for the any character (<code>s</code>) flag, where in <code>.</code> …\nSet the value for the any character (<code>s</code>) flag, where in <code>.</code> …\nCreate a new empty regex set.\nReturns the ending byte offset of the match in the …\nEscapes all regular expression meta characters in <code>text</code>.\nExpands all instances of <code>$name</code> in <code>replacement</code> to the …\nReturns the start and end byte range of the leftmost-first …\nReturns the same as find, but starts the search at the …\nReturns an iterator for each successive non-overlapping …\nShows the original regular expression.\nShows the original regular expression.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to parse a string into a regular expression\nReturns the match associated with the capture group at …\nReturns the start and end positions of the Nth capture …\nSet the value for the ignore whitespace (<code>x</code>) flag.\nSet the value for the ignore whitespace (<code>x</code>) flag.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this set contains no regular expressions.\nReturns true if and only if one of the regexes in this set …\nReturns true if and only if there is a match for the regex …\nReturns the same as is_match, but starts the search at the …\nAn iterator that yields all capturing matches in the order …\nReturns an iterator over indexes in the regex that matched.\nReturns the number of captured groups.\nReturns the total number of regular expressions in this …\nThe total number of regexes in the set that created these …\nReturns the total number of capturing groups.\nWhether the regex at the given index matched.\nWhether this set contains any matches.\nReturns the set of regular expressions that match in the …\nSet the value for the multi-line matching (<code>m</code>) flag.\nSet the value for the multi-line matching (<code>m</code>) flag.\nReturns the match for the capture group named <code>name</code>. If <code>name</code>…\nSet the nesting limit for this parser.\nSet the nesting limit for this parser.\nCreate a new regular expression builder with the given …\nCreate a new regular expression builder with the given …\nCreate a new regex set with the given regular expressions.\nCompiles a regular expression. Once compiled, it can be …\nReturn a fixed unchanging replacement string.\nReturn a fixed unchanging replacement string.\nWhether to support octal syntax or not.\nWhether to support octal syntax or not.\nReturns the patterns that this set will match on.\nReturns the range over the starting and ending byte …\nReplaces the leftmost-first match with the replacement …\nReplaces all non-overlapping matches in <code>text</code> with the …\nAppends text to <code>dst</code> to replace the current match.\nReplaces at most <code>limit</code> non-overlapping matches in <code>text</code> …\nReturns the end location of a match in the text given.\nReturns the same as shortest_match, but starts the search …\nSet the approximate size limit of the compiled regular …\nSet the approximate size limit of the compiled regular …\nReturns an iterator of substrings of <code>text</code> delimited by a …\nReturns an iterator of at most <code>limit</code> substrings of <code>text</code> …\nReturns the starting byte offset of the match in the …\nSet the value for the greedy swap (<code>U</code>) flag.\nSet the value for the greedy swap (<code>U</code>) flag.\nSet the value for the Unicode (<code>u</code>) flag.\nSet the value for the Unicode (<code>u</code>) flag.\nCaptureLocations is a low level representation of the raw …\nAn iterator that yields all non-overlapping capture groups …\nAn iterator over the names of all possible captures.\nCaptures represents a group of captured byte strings for a …\nMatch represents a single match of a regex in a haystack.\nAn iterator over all non-overlapping matches for a …\n<code>NoExpand</code> indicates literal byte string replacement.\nA compiled regular expression for matching arbitrary bytes.\nA configurable builder for a regular expression.\nMatch multiple (possibly overlapping) regular expressions …\nA configurable builder for a set of regular expressions.\nReplacer describes types that can be used to replace …\nBy-reference adaptor for a <code>Replacer</code>\nA set of matches returned by a regex set.\nAn owned iterator over the set of matches from a regex set.\nA borrowed iterator over the set of matches from a regex …\nYields all substrings delimited by a regular expression …\nYields at most <code>N</code> substrings delimited by a regular …\nAn iterator that yields all capturing matches in the order …\nReturns the matched text.\nReturns the original string of this regex.\nConsume the builder and compile the regular expression.\nConsume the builder and compile the regular expressions …\nReturn a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.\nReturn a <code>Replacer</code> that borrows and wraps this <code>Replacer</code>.\nReturns an empty set of capture locations that can be …\nReturns an iterator over the capture names.\nReturns the capture groups corresponding to the …\nReturns an iterator over all the non-overlapping capture …\nReturns the number of captures.\nThis is like <code>captures</code>, but uses <code>CaptureLocations</code> instead of\nReturns the same as <code>captures_read</code>, but starts the search …\nSet the value for the case insensitive (<code>i</code>) flag.\nSet the value for the case insensitive (<code>i</code>) flag.\nSet the approximate size of the cache used by the DFA.\nSet the approximate size of the cache used by the DFA.\nSet the value for the any character (<code>s</code>) flag, where in <code>.</code> …\nSet the value for the any character (<code>s</code>) flag, where in <code>.</code> …\nCreate a new empty regex set.\nReturns the ending byte offset of the match in the …\nExpands all instances of <code>$name</code> in <code>replacement</code> to the …\nReturns the start and end byte range of the leftmost-first …\nReturns the same as find, but starts the search at the …\nReturns an iterator for each successive non-overlapping …\nShows the original regular expression.\nShows the original regular expression.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to parse a string into a regular expression\nReturns the match associated with the capture group at …\nReturns the start and end positions of the Nth capture …\nSet the value for the ignore whitespace (<code>x</code>) flag.\nSet the value for the ignore whitespace (<code>x</code>) flag.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this set contains no regular expressions.\nReturns true if and only if there is a match for the regex …\nReturns true if and only if one of the regexes in this set …\nReturns the same as is_match, but starts the search at the …\nAn iterator that yields all capturing matches in the order …\nReturns an iterator over indexes in the regex that matched.\nReturns the number of captured groups.\nReturns the total number of capturing groups.\nReturns the total number of regular expressions in this …\nThe total number of regexes in the set that created these …\nWhether the regex at the given index matched.\nWhether this set contains any matches.\nReturns the set of regular expressions that match in the …\nSet the value for the multi-line matching (<code>m</code>) flag.\nSet the value for the multi-line matching (<code>m</code>) flag.\nReturns the match for the capture group named <code>name</code>. If <code>name</code>…\nSet the nesting limit for this parser.\nSet the nesting limit for this parser.\nCreate a new regular expression builder with the given …\nCreate a new regular expression builder with the given …\nCompiles a regular expression. Once compiled, it can be …\nCreate a new regex set with the given regular expressions.\nReturn a fixed unchanging replacement byte string.\nReturn a fixed unchanging replacement byte string.\nWhether to support octal syntax or not.\nWhether to support octal syntax or not.\nReturns the patterns that this set will match on.\nReturns the range over the starting and ending byte …\nReplaces the leftmost-first match with the replacement …\nReplaces all non-overlapping matches in <code>text</code> with the …\nAppends text to <code>dst</code> to replace the current match.\nReplaces at most <code>limit</code> non-overlapping matches in <code>text</code> …\nReturns the end location of a match in the text given.\nReturns the same as shortest_match, but starts the search …\nSet the approximate size limit of the compiled regular …\nSet the approximate size limit of the compiled regular …\nReturns an iterator of substrings of <code>text</code> delimited by a …\nReturns an iterator of at most <code>limit</code> substrings of <code>text</code> …\nReturns the starting byte offset of the match in the …\nSet the value for the greedy swap (<code>U</code>) flag.\nSet the value for the greedy swap (<code>U</code>) flag.\nSet the value for the Unicode (<code>u</code>) flag.\nSet the value for the Unicode (<code>u</code>) flag.")