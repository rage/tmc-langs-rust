searchState.loadedDescShard("aho_corasick", 0, "A library for finding occurrences of many patterns at …\nAn automaton for searching multiple strings in linear time.\nA builder for configuring an Aho-Corasick automaton.\nAn error that occurred during the construction of an …\nThe kind of error that occurred.\nAn iterator of non-overlapping matches in a particular …\nAn iterator of overlapping matches in a particular …\nUse leftmost-first match semantics, which reports leftmost …\nUse leftmost-longest match semantics, which reports …\nA representation of a match reported by an Aho-Corasick …\nA knob for controlling the match semantics of an …\nAn error that occurs when premultiplication of state IDs …\nUse standard match semantics, which support overlapping …\nA trait describing the representation of an automaton’s …\nAn error that occurs when constructing an automaton would …\nAn iterator that reports Aho-Corasick matches in a stream.\nEnable anchored mode, which requires all matches to start …\nEnable ASCII-aware case insensitive matching.\nAutomatically configure the settings on this builder …\nBuild an Aho-Corasick automaton using the configuration …\nBuild an Aho-Corasick automaton using the configuration …\nShrink the size of the transition alphabet by mapping …\nSet the limit on how many NFA states use a dense …\nCompile the standard Aho-Corasick automaton into a …\nReturns the location of the first detected match in …\nThe ending position of the match.\nReturns the location of the first match according to the …\nReturns an iterator of non-overlapping matches, using the …\nReturns an iterator of overlapping matches in the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a <code>usize</code> to this implementation’s …\nReturns the approximate total amount of heap used by this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if and only if this match is empty. That is, …\nReturns true if and only if this automaton matches the …\nReturn the kind of this error.\nReturns the match kind used by this automaton.\nSet the desired match semantics.\nReturn the maximum state identifier supported by this …\nReturns the length of the longest pattern matched by this …\nCreate a new Aho-Corasick automaton using the default …\nCreate a new builder for configuring an Aho-Corasick …\nBuild an Aho-Corasick automaton with an automatically …\nA lower level API for packed multiple substring search, …\nReturns the identifier of the pattern that matched.\nReturn the total number of patterns matched by this …\nEnable heuristic prefilter optimizations.\nPremultiply state identifiers in the transition table. …\nReplace all matches with a corresponding value in the …\nReplace all matches using raw bytes with a corresponding …\nReplace all matches using a closure called on each match. …\nReplace all matches using raw bytes with a closure called …\nThe starting position of the match.\nReturns an iterator of non-overlapping matches in the given\nSearch for and replace all matches of this automaton in …\nSearch the given reader and replace all matches of this …\nReturns true if and only if this automaton supports …\nReturns true if and only if this automaton supports stream …\nConvert this implementation’s representation to a <code>usize</code>.\nThe maximum possible state ID.\nThe maximum possible state id.\nThe maximum ID required by premultiplication.\nA builder for constructing a packed searcher from a …\nThe configuration for a packed multiple pattern searcher.\nAn iterator over non-overlapping matches from a packed …\nUse leftmost-first match semantics, which reports leftmost …\nUse leftmost-longest match semantics, which reports …\nA knob for controlling the match semantics of a packed …\nA packed searcher for quickly finding occurrences of …\nAdd the given pattern to this set to match.\nBuild a searcher from the patterns added to this builder …\nCreate a packed builder from this configuration. The …\nAdd the given iterator of patterns to this set to match.\nReturn the first occurrence of any of the patterns in this …\nReturn the first occurrence of any of the patterns in this …\nReturn an iterator of non-overlapping occurrences of the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the approximate total amount of heap used by this …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the match semantics for this configuration.\nReturns the match kind used by this packed searcher.\nReturns the minimum length of a haystack that is required …\nCreate a new default configuration. A default …\nCreate a new builder for constructing a multi-pattern …\nA convenience function for constructing a searcher from an …")