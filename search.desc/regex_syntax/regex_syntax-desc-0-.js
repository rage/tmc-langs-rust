searchState.loadedDescShard("regex_syntax", 0, "This crate provides a robust regular expression parser.\nContains the error value\nThis error type encompasses any error that can be returned …\nContains the success value\nAn error that occurred while translating concrete syntax …\nA convenience parser for regular expressions.\nA builder for a regular expression parser.\nA type alias for dealing with errors returned by this …\nAn error that occurred while translating abstract syntax …\nAn error that occurs when the Unicode-aware <code>\\w</code> class is …\nWhen enabled, the parser will permit the construction of a …\nDefines an abstract syntax for regular expressions.\nBuild a parser from this configuration with the given …\nEnable or disable the case insensitive flag by default.\nEnable or disable the “dot matches any character” flag …\nEscapes all regular expression meta characters in <code>text</code>.\nEscapes all meta characters in <code>text</code> and writes the result …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDefines a high-level intermediate representation for …\nEnable verbose mode in the regular expression.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the given character has significance in a …\nReturns true if and only if the given character is an …\nReturns true if and only if the given character is a …\nEnable or disable the multi-line matching flag by default.\nSet the nesting limit for this parser.\nCreate a new parser builder with a default configuration.\nCreate a new parser with a default configuration.\nWhether to support octal syntax or not.\nParse the regular expression into a high level intermediate\nEnable or disable the “swap greed” flag by default.\nReturns true if and only if the given character is a …\nEnable or disable the Unicode flag (<code>u</code>) by default.\nConverts ranges of Unicode scalar values to equivalent …\n<code>[0-9A-Za-z]</code>\n<code>[A-Za-z]</code>\nAn alternation of regular expressions.\nAn alternation of regular expressions.\n<code>[\\x00-\\x7F]</code>\nAn ASCII character class, e.g., <code>[:alnum:]</code> or <code>[:punct:]</code>.\nA single zero-width assertion.\nA single zero-width assertion.\nAn assertion kind.\nAn abstract syntax tree for a single regular expression.\n<code>{m,}</code>\nBell, spelled <code>\\a</code> (<code>\\x07</code>).\nA single binary operation (i.e., &amp;&amp;, – or ~~).\n<code>[ \\t]</code>\n<code>{m,n}</code>\nA bracketed character class set, which may contain zero or …\nA bracketed character class set, which may contain zero or …\n<code>(a)</code>\nThe capturing group limit was exceeded.\nA capture name.\n<code>(?P&lt;name&gt;a)</code>\nCarriage return, spelled <code>\\r</code> (<code>\\x0D</code>).\n<code>i</code>\nA single character class expression.\nA single character class. This includes all forms of …\nAn ASCII character class.\nThe available ASCII character classes.\nA bracketed character class, e.g., <code>[a-z0-9]</code>.\nAn invalid escape sequence was found in a character class …\nA Perl character class.\nThe available Perl character classes.\nAn invalid character class range was found. An invalid …\nAn invalid range boundary was found in a character class. …\nA character class set.\nA Unicode character class set operation.\nThe type of a Unicode character class set operation.\nA single component of a character class set.\nA single character class range in a set.\nA union of items inside a character class set.\nAn opening <code>[</code> was found with no corresponding closing <code>]</code>.\nA Unicode character class.\nThe available forms of Unicode character classes.\nThe type of op used in a Unicode character class.\n<code>[\\x00-\\x1F\\x7F]</code>\nA property set to a specific value using a colon, e.g., …\nA comment from a regular expression with an associated …\nA concatenation of regular expressions.\nA concatenation of regular expressions.\nNote that this error variant is no longer used. Namely, a …\nAn invalid decimal number was given where one was expected.\nThe difference of two sets, e.g., <code>\\pN--[0-9]</code>.\nDecimal numbers.\n<code>[0-9]</code>\nThe “any character” class.\n<code>s</code>\nAn empty regex that matches everything.\nAn empty item.\n<code>$</code>\n<code>\\z</code>\nA property set to a specific value, e.g., <code>\\p{scx=Katakana}</code>.\nAn error that visiting an AST might return.\nAn error that occurred while parsing a regular expression …\nThe type of an error that occurred while building an AST.\nA bracketed hex literal was empty.\nA bracketed hex literal did not correspond to a Unicode …\nAn invalid hexadecimal digit was found.\nEOF was found before an escape sequence was completed.\nAn unrecognized escape sequence.\n<code>{m}</code>\nA single flag.\nA single flag in a group.\nA dangling negation was used when setting flags, e.g., <code>i-</code>.\nA flag was used twice, e.g., <code>i-i</code>.\nThe negation operator was used twice, e.g., <code>-i-s</code>.\nExpected a flag but got EOF, e.g., <code>(?</code>.\nUnrecognized flag, e.g., <code>a</code>.\nA group of flags.\nA set of flags, e.g., <code>(?is)</code>.\nA single item in a group of flags.\nThe kind of an item in a group of flags.\nForm feed, spelled <code>\\f</code> (<code>\\x0C</code>).\n<code>[!-~]</code>\nA grouped regular expression.\nA grouped regular expression.\nThe kind of a group.\nA duplicate capture name was found.\nA capture group name is empty, e.g., <code>(?P&lt;&gt;abc)</code>.\nAn invalid character was seen for a capture group name. …\nA closing <code>&gt;</code> could not be found for a capture group name.\nAn unclosed group, e.g., <code>(ab</code>.\nAn unopened group, e.g., <code>ab)</code>.\nThe literal is written as a hex code with a bracketed …\nThe literal is written as a hex code with a fixed number …\nThe type of a Unicode hex literal.\n<code>x</code>\nThe intersection of two sets, e.g., <code>\\pN&amp;&amp;[a-z]</code>.\nAn item, which can be a single literal, range, nested …\nLine feed, spelled <code>\\n</code> (<code>\\x0A</code>).\nA single literal expression.\nA single character literal, which includes escape …\nA single literal.\nThe kind of a single literal expression.\n<code>[a-z]</code>\n<code>m</code>\nA binary property, general category or script. The string …\nA property name and an associated value.\nA negation operator applied to all subsequent flags in the …\nThe nest limit was exceeded. The limit stored here is the …\n<code>(?:a)</code> and <code>(?i:a)</code>\nA property that isn’t a particular value, e.g., …\n<code>\\B</code>\nThe literal is written as an octal escape, e.g., <code>\\141</code>.\nA one letter abbreviated class, e.g., <code>\\pN</code>.\n<code>+</code>\nThe result of visiting an AST.\nA perl character class, e.g., <code>\\d</code> or <code>\\W</code>.\nA perl character class, e.g., <code>\\d</code> or <code>\\W</code>.\nA single position in a regular expression.\n<code>[ -~]</code>\n<code>[!-/:-@\\[-</code>{-~]`\nThe literal is written as an escape because it is …\nA range between two literals.\n<code>{m,n}</code>\nA repetition operation applied to a regular expression.\nA repetition operator applied to an arbitrary regular …\nAn opening <code>{</code> was not followed by a valid decimal value. …\nThe range provided in a counted repetition operator is …\nAn opening <code>{</code> was found with no corresponding closing <code>}</code>.\nThe kind of a repetition operator.\nA repetition operator was applied to a missing …\nThe repetition operator itself.\nA range repetition operator.\nA group of flags that is not applied to a particular …\nSpace, spelled <code>\\ </code> (<code>\\x20</code>). Note that this can only appear …\nWhitespace.\n<code>[\\t\\n\\v\\f\\r ]</code>\nSpan represents the position information of a single AST …\nThe literal is written as a specially recognized escape, …\nThe type of a special literal.\n<code>^</code>\n<code>\\A</code>\n<code>U</code>\nThe symmetric difference of two sets. The symmetric …\nTab, spelled <code>\\t</code> (<code>\\x09</code>).\nA Unicode character class, e.g., <code>\\pL</code> or <code>\\p{Greek}</code>.\nA Unicode character class, e.g., <code>\\pL</code> or <code>\\p{Greek}</code>.\n<code>u</code>\nThe Unicode class is not valid. This typically occurs when …\nA <code>\\U</code> prefix. When used without brackets, this form is …\nA <code>\\u</code> prefix. When used without brackets, this form is …\nA union of items.\nWhen octal support is disabled, this error is produced …\nWhen syntax similar to PCRE’s look-around is used, this …\n<code>[A-Z]</code>\nThe literal is written verbatim, e.g., <code>a</code> or <code>☃</code>.\nVertical tab, spelled <code>\\v</code> (<code>\\x0B</code>).\nA trait for visiting an abstract syntax tree (AST) in …\nAn abstract syntax tree for a singular expression along …\nWord characters.\n<code>[0-9A-Za-z_]</code>\n<code>\\b</code>\nA <code>\\x</code> prefix. When used without brackets, this form is …\n<code>[0-9A-Fa-f]</code>\n<code>*</code>\n<code>?</code>\nAdd the given item to this sequence of flags.\nThe actual ast.\nThe regular expression under repetition.\nThe regular expression in this group.\nThe alternate regular expressions.\nThe concatenation regular expressions.\nReturn an auxiliary span. This span exists only for some …\nIf this literal was written as a <code>\\x</code> hex escape, then this …\nThe Unicode scalar value corresponding to this literal.\nReturns the capture index of this group, if this is a …\nThe approximate column number, starting at <code>1</code>.\nThe comment text, starting with the first character …\nAll comments found in the original regular expression.\nThe number of digits that must be used with this literal …\nThe end byte offset.\nThe end of this range.\nAll implementors of <code>Visitor</code> must provide a <code>finish</code> method, …\nReturns the state of the given flag in this set.\nIf this group is non-capturing, then this returns the …\nThe actual sequence of flags.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the corresponding ClassAsciiKind variant for the …\nWhether this operation was applied greedily or not.\nThe capture index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn this alternation as an AST.\nReturn this concatenation as an AST.\nReturn this union as a character class set item.\nReturns true if and only if this group is capturing.\nReturns true if and only if this span is empty. That is, …\nReturn true if and only if this Ast is empty.\nWhether the op is an equality op or not.\nReturns true if this class has been negated.\nReturns true if and only if this item is a negation …\nReturns true if and only if this span occurs on a single …\nReturns true if and only if this character class range is …\nReturns true if and only if this repetition range is valid.\nThe sequence of items that make up this union.\nA sequence of flag items. Each item is either a flag or a …\nReturn the type of this error.\nThe kind of this literal.\nThe kind of Perl class.\nThe kind of ASCII class.\nThe kind of Unicode class.\nThe type of this set. A set is either a normal union of …\nThe type of this set operation.\nThe assertion kind, e.g., <code>\\b</code> or <code>^</code>.\nThe type of operation.\nThe kind of this group.\nThe kind of this item.\nThe left hand side of the operation.\nThe line number, starting at <code>1</code>.\nThe capture name.\nWhether the class is negated or not. e.g., <code>\\d</code> is not …\nWhether the class is negated or not. e.g., <code>[[:alpha:]]</code> is …\nWhether this class is negated or not.\nWhether this class is negated or not. e.g., <code>[a]</code> is not …\nCreate a new span with the given positions.\nCreate a new position with the given information.\nThe absolute offset of this position, starting at <code>0</code> from …\nThe actual operation.\nThis module provides a regular expression parser.\nThe original pattern string in which this error occurred.\nThis module provides a regular expression printer for <code>Ast</code>.\nPush a new item in this union.\nThe right hand side of the operation.\nReturn the span at which this error occurred.\nReturn the span of this abstract syntax tree.\nReturn the span of this character class.\nReturn the span of this character class set.\nReturn the span of this character class set item.\nThe span of this comment, including the beginning <code>#</code> and …\nThe span of this alternation.\nThe span of this concatenation.\nThe span of this literal.\nThe span of this class.\nThe span of this class.\nThe span of this class.\nThe span of this class.\nThe span of this range.\nThe span of the items in this operation. e.g., the <code>a-z0-9</code> …\nThe span of this operation. e.g., the <code>a-z--[h-p]</code> in …\nThe span of this assertion.\nThe span of this operation.\nThe span of this operator. This includes things like <code>+</code>, <code>*?</code> …\nThe span of this group.\nThe span of this capture name.\nThe span of these flags, including the grouping …\nThe span of this group of flags.\nThe span of this item.\nCreate a new span using the given position as the start …\nThis method is called before beginning traversal of the …\nThis method is called before beginning traversal of the …\nThe start byte offset.\nThe start of this range.\nBuild a set from a union.\nExecutes an implementation of <code>Visitor</code> in constant stack …\nThis method is called between child nodes of an <code>Alternation</code>…\nThis method is called between child nodes of an <code>Alternation</code>…\nThis method is called between the left hand and right hand …\nThis method is called between the left hand and right hand …\nThis method is called on every <code>ClassSetBinaryOp</code> after …\nThis method is called on every <code>ClassSetBinaryOp</code> after …\nThis method is called on every <code>ClassSetBinaryOp</code> before …\nThis method is called on every <code>ClassSetBinaryOp</code> before …\nThis method is called on every <code>ClassSetItem</code> after …\nThis method is called on every <code>ClassSetItem</code> after …\nThis method is called on every <code>ClassSetItem</code> before …\nThis method is called on every <code>ClassSetItem</code> before …\nThis method is called on an <code>Ast</code> after descending all of …\nThis method is called on an <code>Ast</code> after descending all of …\nThis method is called on an <code>Ast</code> before descending into …\nThis method is called on an <code>Ast</code> before descending into …\nCreate a new span by replacing the ending the position …\nCreate a new span by replacing the starting the position …\nThe property name (which may be empty).\nThe type of Unicode op used to associate <code>name</code> with <code>value</code>.\nThe property value (which may be empty).\nThe position of the original flag. The error position …\nThe position of the original negation operator. The error …\nThe position of the initial occurrence of the capture …\nA regular expression parser.\nA builder for a regular expression parser.\nBuild a parser from this configuration with the given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nEnable verbose mode in the regular expression.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the nesting limit for this parser.\nCreate a new parser builder with a default configuration.\nCreate a new parser with a default configuration.\nWhether to support octal syntax or not.\nParse the regular expression into an abstract syntax tree.\nParse the regular expression and return an abstract syntax …\nA printer for a regular expression abstract syntax tree.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new printer.\nPrint the given <code>Ast</code> to the given writer. The writer must …\nAn alternation of expressions. An alternation always has …\nThe high-level intermediate representation for an anchor …\nAn anchor assertion. An anchor assertion match always has …\nMatch an ASCII-only word boundary. That is, this matches a …\nMatch an ASCII-only negation of a word boundary.\nMatches a sub-expression at least this many times.\nMatches a sub-expression at least <code>m</code> times and at most <code>n</code> …\nA single character represented by an arbitrary byte.\nA set of characters represented by arbitrary bytes (one …\nA normal unnamed capturing group.\nA named capturing group.\nAn error that occurs when Unicode-aware simple case …\nThe high-level intermediate representation of a character …\nA single character class that matches any of the …\nA set of characters represented by arbitrary bytes (where …\nAn iterator over all ranges in a byte character class.\nA single range of characters represented by arbitrary …\nA set of characters represented by Unicode scalar values.\nAn iterator over all ranges in a Unicode character class.\nA single range of characters represented by Unicode scalar …\nA concatenation of expressions. A concatenation always has …\nThe empty regular expression, which matches everything, …\nThis occurs when the translator attempts to construct a …\nMatch the end of a line or the end of text. Specifically, …\nMatch the end of text. Specifically, this matches at the …\nAn error that visiting an HIR might return.\nAn error that can occur while translating an <code>Ast</code> to a <code>Hir</code>.\nThe type of an error that occurred while building an <code>Hir</code>.\nMatches a sub-expression exactly this many times.\nThe high-level intermediate representation for a group.\nA possibly capturing group, which contains a child …\nThe kind of group.\nA high-level intermediate representation (HIR) for a …\nThe kind of an arbitrary <code>Hir</code> expression.\nThis error occurs when translating a pattern that could …\nThe high-level intermediate representation of a literal.\nA single literal character that matches exactly this …\nA non-capturing group.\nMatches a sub-expression one or more times.\nThe result of visiting an HIR.\nMatches a sub-expression within a bounded range of times.\nThe high-level intermediate representation of a repetition …\nA repetition operation applied to a child expression.\nThe kind of a repetition operator.\nThe kind of a counted repetition operator.\nMatch the beginning of a line or the beginning of text. …\nMatch the beginning of text. Specifically, this matches at …\nA single character represented by a Unicode scalar value.\nA set of characters represented by Unicode scalar values.\nMatch a Unicode-aware word boundary. That is, this matches …\nThis occurs when the Unicode simple case mapping tables …\nMatch a Unicode-aware negation of a word boundary.\nThis error occurs when a Unicode feature is used when …\nThis occurs when a Unicode-aware Perl character class (<code>\\w</code>, …\nThis occurs when an unrecognized Unicode property name …\nThis occurs when an unrecognized Unicode property value …\nA trait for visiting the high-level IR (HIR) in depth …\nThe high-level intermediate representation for a …\nA word boundary assertion, which may or may not be Unicode …\nMatches a sub-expression zero or more times.\nMatches a sub-expression zero or one times.\nReturns the alternation of the given expressions.\nCreates an anchor assertion HIR expression.\nBuild an HIR expression for <code>(?s).</code>.\nApply Unicode simple case folding to this character class, …\nExpand this character class such that it contains all case …\nExpand this character class such that it contains all case …\nCreates a class HIR expression.\nReturns the concatenation of the given expressions.\nSubtract the given character class from this character …\nSubtract the given byte class from this byte class, in …\nBuild an HIR expression for <code>.</code>.\nReturns an empty HIR expression.\nCreate a new class with no ranges.\nCreate a new class with no ranges.\nReturn the end of this range.\nReturn the end of this range.\nAll implementors of <code>Visitor</code> must provide a <code>finish</code> method, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether this repetition operator is greedy or not. A …\nCreates a group HIR expression.\nReturns true if and only if this kind has any (including …\nThe expression inside the capturing group, which may be …\nThe expression being repeated.\nIntersect this character class with the given character …\nIntersect this byte class with the given byte class, in …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes ownership of this HIR expression and returns its …\nReturns true if and only if this character class will …\nReturns true if and only if this character class will …\nReturns true if and only if this entire HIR expression is …\nReturn true if and only if this HIR is either a simple …\nReturn true if and only if this HIR will always match …\nReturns true if and only if this character class will only …\nReturn true if and only if this HIR is required to match …\nReturn true if and only if this HIR is required to match …\nReturn true if and only if this HIR contains any …\nReturn true if and only if this HIR contains any …\nReturn true if and only if this HIR is the empty regular …\nReturn true if and only if this HIR is required to match …\nReturn true if and only if this HIR is required to match …\nReturn true if and only if this HIR is a simple literal. …\nReturn true if and only if the empty string is part of the …\nReturns true if and only if this repetition operator makes …\nReturns true if and only if this word boundary assertion …\nReturns true if and only if this literal corresponds to a …\nReturn an iterator over all ranges in this class.\nReturn an iterator over all ranges in this class.\nReturn the type of this error.\nReturns a reference to the underlying HIR kind.\nThe kind of this group. If it is a capturing group, then …\nThe kind of this repetition operator.\nProvides routines for extracting literal prefixes and …\nCreates a literal HIR expression.\nNegate this character class in place.\nNegate this character class.\nNegate this byte class.\nCreate a new class from a sequence of ranges.\nCreate a new Unicode scalar value range for a character …\nCreate a new class from a sequence of ranges.\nCreate a new byte range for a character class.\nThe original pattern string in which this error occurred.\nThis module provides a regular expression printer for <code>Hir</code>.\nAdd a new range to this set.\nAdd a new range to this set.\nReturn the underlying ranges as a slice.\nReturn the underlying ranges as a slice.\nCreates a repetition HIR expression.\nReturn the span at which this error occurred.\nThis method is called before beginning traversal of the …\nThis method is called before beginning traversal of the …\nReturn the start of this range.\nReturn the start of this range.\nCompute the symmetric difference of the given character …\nCompute the symmetric difference of the given byte …\nDefines a translator that converts an <code>Ast</code> to an <code>Hir</code>.\nExpand this character class such that it contains all case …\nUnion this character class with the given character class, …\nUnion this byte class with the given byte class, in place.\nExecutes an implementation of <code>Visitor</code> in constant stack …\nThis method is called between child nodes of an …\nThis method is called between child nodes of an …\nThis method is called on an <code>Hir</code> after descending all of …\nThis method is called on an <code>Hir</code> after descending all of …\nThis method is called on an <code>Hir</code> before descending into …\nThis method is called on an <code>Hir</code> before descending into …\nCreates a word boundary assertion HIR expression.\nThe capture index of the group.\nThe name of the group.\nA single member of a set of literals extracted from a …\nA set of literal byte strings extracted from a regular …\nAdds the given literal to this set.\nExtends each literal in this set with the byte class given.\nExtends each literal in this set with the character class …\nReturns true if all members in this set are complete.\nReturns true if any member in this set is complete.\nClears this set of all members.\nReturns true if this set contains an empty literal.\nExtends each literal in this set with the bytes given.\nExtends this set with another set.\nCuts every member of this set. When a member is cut, it …\nCuts this literal.\nReturns a new empty set of literals using default limits.\nReturns a new complete empty literal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if this literal was “cut.”\nReturns true if this set is empty or if all of its members …\nGet the character class size limit for this set.\nGet the approximate size limit (in bytes) of this set.\nReturns the set of literals as a slice. Its order is …\nReturns the longest common prefix of all members in this …\nReturns the longest common suffix of all members in this …\nReturns the length of the smallest literal.\nReturns a new complete literal with the bytes given.\nReturns a set of literal prefixes extracted from the given …\nReverses all members in place.\nLimits the size of character(or byte) classes considered.\nSet the approximate size limit (in bytes) of this set.\nReturns a set of literal suffixes extracted from the given …\nReturns a new empty set of literals using this set’s …\nReturns a new set of literals with the given number of …\nReturns a new set of prefixes of this set of literals that …\nReturns a new set of suffixes of this set of literals that …\nUnions this set with another set.\nUnions the prefixes from the given expression to this set.\nUnions the suffixes from the given expression to this set.\nA printer for a regular expression’s high-level …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new printer.\nPrint the given <code>Ast</code> to the given writer. The writer must …\nA translator maps abstract syntax to a high level …\nA builder for constructing an AST-&gt;HIR translator.\nWhen enabled, translation will permit the construction of …\nBuild a translator using the current configuration.\nEnable or disable the case insensitive flag (<code>i</code>) by default.\nEnable or disable the “dot matches any character” flag …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnable or disable the multi-line matching flag (<code>m</code>) by …\nCreate a new translator builder with a default c …\nCreate a new translator using the default configuration.\nEnable or disable the “swap greed” flag (<code>U</code>) by default.\nTranslate the given abstract syntax tree (AST) into a high …\nEnable or disable the Unicode flag (<code>u</code>) by default.\nFour successive byte ranges.\nOne byte range.\nThree successive byte ranges.\nTwo successive byte ranges.\nA single inclusive range of UTF-8 bytes.\nUtf8Sequence represents a sequence of byte ranges.\nAn iterator over ranges of matching UTF-8 byte sequences.\nReturns the underlying sequence of byte ranges as a slice.\nEnd of byte range (inclusive).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of byte ranges in this sequence.\nReturns true if and only if a prefix of <code>bytes</code> matches this …\nReturns true if and only if the given byte is in this …\nCreate a new iterator over UTF-8 byte ranges for the …\nReverses the ranges in this sequence.\nStart of byte range (inclusive).")