searchState.loadedDescShard("subprocess", 0, "Execution of and interaction with external processes and …\nData captured by <code>Exec::capture</code> and <code>Pipeline::capture</code>.\nError during communication.\nUnattended data exchange with the subprocess.\nContains the error value\nA builder for <code>Popen</code> instances, providing control and …\nExit status of a process.\nThe process exited with the specified exit code.\nRedirect the stream to the specified open <code>File</code>.\nAn IO system call failed while executing the requested …\nA logical error was made, e.g. invalid arguments detected …\nMerge the stream to the other output stream.\nDo nothing with the stream.\nMarker value for <code>stdin</code>, <code>stdout</code>, and <code>stderr</code> methods of <code>Exec</code> …\nContains the success value\nThe process exit status cannot be described by the …\nRedirect the stream to a pipe.\nA builder for multiple <code>Popen</code> instances connected via pipes.\nInterface to a running subprocess.\nOptions for <code>Popen::create</code>.\nError in <code>Popen</code> calls.\nLike <code>File</code>, but the file is specified as <code>Rc</code>.\nInstruction what to do with a stream in the child process.\nResult returned by calls in the <code>subprocess</code> crate in places …\nThe process exited due to a signal with the specified …\nIt is known that the process has completed, but its exit …\nAppends <code>arg</code> to argument list.\nExtends the argument list with <code>args</code>.\nCreate a <code>Pipeline</code> from <code>self</code> and <code>rhs</code>.\nAppend a pipeline to the pipeline and return a new …\nAppend a command to the pipeline and return a new pipeline.\nStarts the process, collects its output, and waits for it …\nStarts the pipeline, collects its output, and waits for all\nThe data captured before the error was encountered.\nReturns a copy of the value.\nReturns a copy of the value.\nConstructs a new <code>Exec</code>, configured to run <code>command</code>.\nStarts the process and returns a <code>Communicator</code> handle.\nStarts the pipeline and returns a <code>Communicator</code> handle.\nFeed the subprocess with data and capture its output as …\nFeed the subprocess with input data and capture its output.\nPrepare to communicate with the subprocess.\nExecute an external program in a new process.\nReturns the environment of the current process.\nSpecifies the current working directory of the child …\nInitial current working directory of the subprocess.\nMark the process as detached.\nSpecifies that the process is initially detached.\nWhether the <code>Popen</code> instance is initially detached.\nSets an environment variable in the child process.\nEnvironment variables to pass to the subprocess.\nClears the environment of the subprocess.\nSets multiple environment variables in the child process.\nRemoves an environment variable from the child process.\nThe underlying <code>io::Error</code>.\nExecutable to run.\nReturn the exit status of the subprocess, if it is known …\nExit status.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new pipeline from a list of commands. Useful if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTrue if the subprocess was killed by a signal with the …\nStarts the process, waits for it to finish, and returns …\nStarts the pipeline, waits for it to finish, and returns …\nKill the subprocess.\nReturns the corresponding IO <code>ErrorKind</code> for this error.\nLimit the amount of data the next <code>read()</code> will read from the\nLimit the amount of time the next <code>read()</code> will spend …\nCreate a pipe.\nCreates a new pipeline by combining two commands.\nReturn the PID of the subprocess, if it is known to be …\nCheck whether the process is still running, without …\nStarts the process, returning a <code>Popen</code> for the running …\nStarts all commands in the pipeline, and returns a …\nCommunicate with the subprocess, return the contents of …\nReturn the subprocess’s output and error contents as …\nSet group ID for the subprocess.\nMake the subprocess belong to a new process group.\nSet user ID for the subprocess.\nConstructs a new <code>Exec</code>, configured to run <code>cmdstr</code> with the …\nSpecifies how to set up the standard error of the child …\nStandard error as bytes.\nIf <code>stderr</code> was specified as <code>Redirection::Pipe</code>, this will …\nHow to configure the executed program’s standard error.\nReturns the standard error as string, converted from bytes …\nSpecifies a file to which to redirect the standard error …\nSpecifies how to set up the standard input of the child …\nSpecifies how to set up the standard input of the first …\nIf <code>stdin</code> was specified as <code>Redirection::Pipe</code>, this will …\nHow to configure the executed program’s standard input.\nSpecifies how to set up the standard output of the child …\nSpecifies how to set up the standard output of the last …\nStandard output as bytes.\nIf <code>stdout</code> was specified as <code>Redirection::Pipe</code>, this will …\nHow to configure the executed program’s standard output.\nReturns the standard output as string, converted from …\nStarts the process and returns a value implementing the …\nStarts the process and returns a value implementing the …\nStarts the pipeline and returns a value implementing the …\nStarts the process and returns a value implementing the …\nStarts the pipeline and returns a value implementing the …\nTrue if the exit status of the process or pipeline is 0.\nTrue if the exit status of the process is 0.\nTerminate the subprocess.\nShow Exec as command-line string quoted in the Unix style.\nClone the underlying <code>PopenConfig</code>, or return an error.\nClone the underlying <code>Redirection</code>, or return an error.\nSubprocess extensions for Unix platforms.\nWait for the process to finish, and return its exit status.\nWait for the process to finish, timing out after the …\nUnix-specific extension methods for <code>Popen</code>\nSend the specified signal to the child process.")