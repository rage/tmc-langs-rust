searchState.loadedDescShard("lexical_core", 0, "Fast lexical conversion routines for a no_std environment.\nMaximum number of bytes required to serialize any number …\nEmpty byte array found.\nEmpty exponent found.\nEmpty fraction found.\nEmpty integer found.\nEmpty mantissa found.\nContains the error value\nError type for lexical parsing.\nError code, indicating failure type.\nExponent was present without fraction component.\nTrait for numerical types that can be parsed from bytes.\nTrait for floating-point types that can be parsed using …\nInvalid digit found before string termination.\nExponent was present but not allowed.\nInteger had invalid leading zeros.\nInvalid positive exponent sign was found.\nInvalid positive mantissa sign was found.\nExponent sign was required, but not found.\nMantissa sign was required, but not found.\nContains the success value\nIntegral overflow occurred during numeric parsing.\nA specialized Result type for lexical operations.\nTrait for numerical types that can be serialized to bytes.\nIntegral underflow occurred during numeric parsing.\nMacro to automate simplify the creation of an ArrayVec.\nError code designating the type of error occurred.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChecked parser for a string-to-number conversion.\nLossy, checked parser for a string-to-number conversion.\nChecked parser for a string-to-number conversion.\nLossy, checked parser for a string-to-number conversion.\nGet default character for the exponent symbol.\nGet the short representation of an Infinity literal as a …\nGet the long representation of an Infinity literal as a …\nGet string representation of Not a Number as a byte slice.\nOptional position within the buffer for the error.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse number from string.\nLossily parse number from string.\nParse number from string.\nLossily parse number from string.\nSet the default character for the exponent symbol.\nSet the short representation of Infinity from a byte slice.\nSet the long representation of Infinity from a byte slice.\nSet representation of Not a Number from a byte slice.\nSerializer for a number-to-string conversion.\nWrite number to string.")