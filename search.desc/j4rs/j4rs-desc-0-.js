searchState.loadedDescShard("j4rs", 0, "j4rs\nA classpath entry.\nA Java instance Instances contain global Java references …\nA receiver for Java Instances.\nStruct that carries an argument that is used for method …\nAn arg that is created in the Java world.\nRepresents default, known Classes in Java. Can be used as …\nA Java Option.\nHolds the assets for the JVM\nA builder for Jvm\nRepresents a Jar artifact that resides in the local …\nRepresents an Artifact that can be fetched by a remote …\nA repository from which Java artifacts can be fetched.\nContains Maven settings and configuration\nRepresents Java’s null. Use this to create null Objects. …\nA serialized arg that is created in the Rust world.\nAn non-serialized arg created in the Rust world, that …\nCreates a Jvm, similar with an already created j4rs Jvm.\nCreates a <code>jobject</code> from this InvocationArg.\nCreates a <code>jobject</code> from this InvocationArg. The jobject …\nAttaches the current thread to an active JavaVM\nAttaches the current thread to an active JavaVM and …\nCreates a Jvm\nInvokes the static method <code>method_name</code> of the class …\nInitiates a chain of operations on Instances.\nChecks whether an Instance a is equal to some …\nReturns the class name of this instance\nAdds classpath entries.\nAdds a classpath entry.\nCreates a clone of the provided Instance\nCopies the jassets default directory and the j4rs dynamic …\nCreates an <code>Instance</code> of the class <code>class_name</code>, passing an …\nCreates a new Java Array with elements of the class …\nCreates a new Java List with elements of the class …\nCreates an InvocationArg that contains null\nDeploys an artifact in the default j4rs jars location.\nDeploys the required dependencies to run a JavaFX …\nWhen a Jvm goes out of scope and is being dropped, its …\nIf false, the thread will not be detached when the Jvm is …\nReturn an empty slice of <code>InvocationArg</code>s\nRetrieves the field <code>field_name</code> of a created <code>Instance</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience for creating a MavenArtifact.\nConvenience for creating a MavenArtifact.\nReturns the argument unchanged.\nConvenience for creating a MavenArtifactRepo.\nConvenience for creating a MavenArtifactRepo.\nReturns the argument unchanged.\nCreates an instance receiver that will be receiving …\nInitializes a callback channel via a Java Instance that is …\nConsumes this invocation arg and returns its Instance\nConsumes an <code>Instance</code> and returns its jobject. The returned …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitiates a chain of operations on Instances.\nConsumes this InvocationArg and transforms it to an …\nConsumes the <code>Jvm</code> and returns its <code>JNIEnv</code>\nInvokes the method <code>method_name</code> of a created <code>Instance</code>, …\nInvokes the method <code>method_name</code> of a created <code>Instance</code> …\nInvokes the method <code>method_name</code> of a created <code>Instance</code> …\nInvokes the static method <code>method_name</code> of the class …\nInvokes the method <code>method_name</code> of a created <code>Instance</code>, …\nCreates a new Java List with elements of the class …\nCreates a new Java Map with keys of class <code>key_class_name</code> …\nConsumes the Instance and returns its jobject\nAdds a Java option.\nAdds Java options.\nCreates a new JvmBuilder.\nCreates a InvocationArg::Rust. This is default for the …\nCreates a new Jvm.\nCreates a new LocalJarArtifact. path is the location of …\nCreates new Maven Settings by defining additional …\nCreates a new JVM, using the provided classpath entries …\nCreates an instance receiver that will be receiving …\nReturns the first <code>Instance</code> that is available from the …\nReturns the first <code>Instance</code> that is available from the …\nConfigures the builder not to instruct the Java world j4rs …\nTriggers the start of a JavaFX application. When the …\nRetrieves the static class <code>class_name</code>.\nRetrieves the field <code>field_name</code> of a static class.\nThrows an exception in the Java World\nReturns the Rust representation of the provided instance\nReturns the Rust representation of the provided instance, …\nDefines the location of the jassets and deps directory. …\nInstructs j4rs to use the classloader associated to the …\n<code>j4rs</code> uses a custom ClassLoader (namely the <code>J4rsClassLoader</code>…\nCreate the j4rs <code>Jvm</code> using an already created jni <code>JavaVM</code>.\nAdds JavaFX support to the created JVM\nDefines the maven settings to use for provisioning maven …\nIn the case that the j4rs is statically linked to some …\nBy default, the created <code>Jvm</code>s include an implicit classpath …\nContains the error value\nContains the success value\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTypes of FX events.\nProvides JavaFx support.\nDeploys the required dependencies to run a JavaFX …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an InstanceReceiver that receives events of etype …\nCreates an instance receiver that will be receiving …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a FXML and returns a Result of a FxController for it.\nCreates an instance receiver that will be receiving …\nCreates an InstanceReceiver that will receive an Event …\nTriggers the start of a JavaFX application. When the …\nA Java instance Instances contain global Java references …\nEquivalent to C’s <code>void</code> type when used as a pointer.\nManually manage memory through raw pointers.\nA type storing a <code>usize</code> which is a power of two, and thus …\nThe metadata for a <code>Dyn = dyn SomeTrait</code> trait object type.\nThe smallest possible alignment, 1.\nThe type for metadata in pointers and references to <code>Self</code>.\n<code>*mut T</code> but non-zero and covariant.\nProvides the pointer metadata type of any pointed-to type.\nPointers to types implementing this trait alias are …\nAdds an offset to a pointer (convenience for …\nGets the “address” portion of the pointer.\nCompares the <em>addresses</em> of the two pointers for equality, …\nCreates a <code>const</code> raw pointer to a place, without creating …\nCreates a <code>mut</code> raw pointer to a place, without creating an …\nReturns the alignment of the type associated with this …\nComputes the offset that needs to be applied to the …\nReturns a unique reference to the value. If the value may …\nReturns a raw pointer to the slice’s buffer.\nReturns a non-null pointer to the slice’s buffer.\nReturns the alignment as a NonZero&lt;usize&gt;.\nAcquires the underlying <code>*mut</code> pointer.\nReturns a shared reference to the value. If the value may …\nReturns a unique references to the value. In contrast to …\nReturns a shared references to the value. In contrast to …\nReturns a shared reference to a slice of possibly …\nReturns a unique reference to a slice of possibly …\nReturns the alignment as a <code>usize</code>.\nCalculates the offset from a pointer in bytes (convenience …\nCalculates the offset from a pointer in bytes.\nCalculates the distance between two pointers within the …\nCalculates the distance between two pointers within the …\nCalculates the offset from a pointer in bytes (convenience …\nCasts to a pointer of another type.\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>self</code>. The …\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>self</code>. The …\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>src</code> to <code>dst</code>. The …\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>self</code> to <code>dest</code>. The …\nCopies <code>count * size_of::&lt;T&gt;()</code> bytes from <code>self</code> to <code>dest</code>. The …\nCreates a new pointer that is dangling, but non-null and …\nCreates a new <code>NonNull</code> that is dangling, but well-aligned.\nCreates a new pointer that is dangling, but non-null and …\nExecutes the destructor (if any) of the pointed-to value.\nExecutes the destructor (if any) of the pointed-to value.\nCompares raw pointers for equality.\nExposes the “provenance” part of the pointer for …\nCompares the <em>addresses</em> of the two function pointers for …\nReturns the argument unchanged.\nConverts a <code>&amp;mut T</code> to a <code>NonNull&lt;T&gt;</code>.\nReturns the argument unchanged.\nConverts a <code>&amp;T</code> to a <code>NonNull&lt;T&gt;</code>.\nReturns the argument unchanged.\nConverts a mutable reference to a raw pointer.\nConverts a mutable reference to a <code>NonNull</code> pointer.\nForms a (possibly-wide) raw pointer from a data pointer …\nPerforms the same functionality as <code>std::ptr::from_raw_parts</code>…\nPerforms the same functionality as <code>from_raw_parts</code>, except …\nConverts a reference to a raw pointer.\nConverts a reference to a <code>NonNull</code> pointer.\nReturns a raw pointer to an element or subslice, without …\nHash a raw pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the pointer is properly aligned for <code>T</code>.\nReturns whether the pointer is aligned to <code>align</code>.\nReturns <code>true</code> if the non-null raw slice has a length of 0.\nReturns the size and alignment together as a <code>Layout</code>\nReturns the length of a non-null raw slice.\nReturns the base-2 logarithm of the alignment.\nCreates a new pointer by mapping <code>self</code>’s address to a new …\nReturns a bit mask that can be used to match this …\nExtracts the metadata component of a pointer.\nCreates a new <code>NonNull</code> if <code>ptr</code> is non-null.\nCreates an <code>Alignment</code> from a <code>usize</code>, or returns <code>None</code> if it’…\nCreates a new <code>NonNull</code>.\nCreates an <code>Alignment</code> from a power-of-two <code>usize</code>.\nCreates a null raw pointer.\nCreates a null mutable raw pointer.\nReturns the alignment for a type.\nAdds an offset to a pointer.\nCalculates the distance between two pointers within the …\nCalculates the distance between two pointers within the …\nReads the value from <code>src</code> without moving it. This leaves the\nReads the value from <code>self</code> without moving it. This leaves …\nReads the value from <code>src</code> without moving it. This leaves the\nReads the value from <code>self</code> without moving it. This leaves …\nPerforms a volatile read of the value from <code>src</code> without …\nPerforms a volatile read of the value from <code>self</code> without …\nMoves <code>src</code> into the pointed <code>dst</code>, returning the previous <code>dst</code> …\nReplaces the value at <code>self</code> with <code>src</code>, returning the old …\nReturns the size of the type associated with this vtable.\nForms a raw slice from a pointer and a length.\nCreates a non-null raw slice from a thin pointer and a …\nForms a raw mutable slice from a pointer and a length.\nSubtracts an offset from a pointer (convenience for …\nSwaps the values at two mutable locations of the same …\nSwaps the values at two mutable locations of the same …\nSwaps <code>count * size_of::&lt;T&gt;()</code> bytes between the two regions …\nDecompose a (possibly wide) pointer into its data pointer …\nCreates a new pointer with the given address and the …\nConverts an address back to a pointer, picking up some …\nConverts an address back to a mutable pointer, picking up …\nConverts an address back to a mutable pointer, picking up …\nCreates a pointer with the given address and no provenance.\nCreates a pointer with the given address and no provenance.\nCreates a pointer with the given address and no provenance.\nOverwrites a memory location with the given value without …\nOverwrites a memory location with the given value without …\nSets <code>count * size_of::&lt;T&gt;()</code> bytes of memory starting at <code>dst</code>…\nInvokes memset on the specified pointer, setting …\nOverwrites a memory location with the given value without …\nOverwrites a memory location with the given value without …\nPerforms a volatile write of a memory location with the …\nPerforms a volatile write of a memory location with the …")