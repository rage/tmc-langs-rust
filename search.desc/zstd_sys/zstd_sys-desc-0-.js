searchState.loadedDescShard("zstd_sys", 0, "Low-level bindings to the zstd library.\nNo value.\nNo value.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nZDICT_cover_params_t: k and d are the only required …\nZDICT_finalizeDictionary(): Given a custom content as a …\nZDICT_optimizeTrainFromBuffer_cover(): The same …\nZDICT_optimizeTrainFromBuffer_fastCover(): The same …\nZDICT_trainFromBuffer(): Train a dictionary from an array …\nZDICT_trainFromBuffer_cover(): Train a dictionary from an …\nZDICT_trainFromBuffer_fastCover(): Train a dictionary from …\nZDICT_trainFromBuffer_legacy(): Train a dictionary from an …\nZSTDMT_compressStream_generic() : Combines …\nZSTDMT_getFrameProgression(): tells how much data has been …\nZSTDMT_initCStream_internal() : Private use only. Init …\nZSTDMT_toFlushNow() Tell how many bytes are ready to be …\nZSTDMT_updateCParams_whileCompressing() : Updates only a …\nExplicit context\nZSTD_CCtxParams_getParameter() : Similar to …\nZSTD_CCtxParams_init() : Initializes the compression …\nZSTD_CCtxParams_init_advanced() : Initializes the …\nZSTD_CCtxParams_reset() : Reset params to default values.\nZSTD_CCtxParams_setParameter() : Similar to …\nZSTD_CCtx_getParameter() : Get the requested compression …\nZSTD_CCtx_loadDictionary() : Create an internal CDict from …\nZSTD_CCtx_loadDictionary_advanced() : Same as …\nZSTD_CCtx_loadDictionary_byReference() : Same as …\nZSTD_CCtx_refCDict() : Reference a prepared dictionary, to …\nZSTD_CCtx_refPrefix() : Reference a prefix (single-usage …\nZSTD_CCtx_refPrefix_advanced() : Same as …\nZSTD_CCtx_reset() : There are 2 different things that can …\nZSTD_CCtx_setParameter() : Set one compression parameter, …\nZSTD_CCtx_setParametersUsingCCtxParams() : Apply a set of …\nZSTD_CCtx_setPledgedSrcSize() : Total input data size to …\nBulk processing dictionary API\nZSTD_DCtx_getParameter() : Get the requested decompression …\nZSTD_DCtx_loadDictionary() : Create an internal DDict from …\nZSTD_DCtx_loadDictionary_advanced() : Same as …\nZSTD_DCtx_loadDictionary_byReference() : Same as …\nZSTD_DCtx_refDDict() : Reference a prepared dictionary, to …\nZSTD_DCtx_refPrefix() : Reference a prefix (single-usage …\nZSTD_DCtx_refPrefix_advanced() : Same as …\nZSTD_DCtx_reset() : Return a DCtx to clean state. Session …\nZSTD_DCtx_setFormat() : Instruct the decoder context about …\nZSTD_DCtx_setMaxWindowSize() : Refuses allocating internal …\nZSTD_DCtx_setParameter() : Set one compression parameter, …\nZSTD_adjustCParams() : optimize params for a given <code>srcSize</code> …\nCustom memory allocation : These prototypes make it …\nZSTD_cParam_getBounds() : All parameters must belong to an …\nZSTD_checkCParams() : Ensure param values remain within …\nSimple API Compresses <code>src</code> content as a single zstd …\nZSTD_compress2() : Behave the same as ZSTD_compressCCtx(), …\nBuffer-less streaming compression (synchronous mode)\nZSTD_compressCCtx() : Same as ZSTD_compress(), using an …\nZSTD_compressSequences() : Compress an array of …\nAlternative for ZSTD_compressStream2(zcs, output, input, …\nZSTD_compressStream2() : Behaves about the same as …\nZSTD_compressStream2_simpleArgs() : Same as …\nZSTD_compress_advanced() : Note : this function is now …\nZSTD_compress_usingCDict() : Compression using a digested …\nZSTD_compress_usingCDict_advanced() : Note : this function …\nSimple dictionary API Compression at an explicit …\nZSTD_CCtx_params : Quick howto :\nZSTD_createCDict() : When compressing multiple messages or …\nZSTD_createCDict_byReference() : Create a digested …\nZSTD_createDDict() : Create a digested dictionary, ready …\nZSTD_createDDict_byReference() : Create a digested …\nZSTD_dParam_getBounds() : All parameters must belong to an …\nAdvanced decompression API\nZSTD_decompress() : <code>compressedSize</code> : must be the <em>exact</em> …\nZSTD_decompressBound() : <code>src</code> should point to the start of …\nZSTD_decompressDCtx() : Same as ZSTD_decompress(), …\nZSTD_decompressStream_simpleArgs() : Same as …\nZSTD_decompress_usingDDict() : Decompression using a …\nZSTD_decompress_usingDict() : Decompression using a known …\n&lt; Copy dictionary content internally\n&lt; Reference dictionary content – the dictionary buffer …\nEquivalent to ZSTD_compressStream2(zcs, output, …\nZSTD_estimate*() : These functions make it possible to …\nZSTD_estimate?DictSize() : ZSTD_estimateCDictSize() will …\nZSTD_estimateCStreamSize() : ZSTD_estimateCStreamSize() …\nZSTD_findDecompressedSize() : <code>src</code> should point to the …\nZSTD_findFrameCompressedSize() : <code>src</code> should point to the …\nEquivalent to ZSTD_compressStream2(zcs, output, …\nZSTD_frameHeaderSize() : srcSize must be &gt;= …\nBuffer-less streaming decompression (synchronous mode)\nZSTD_freeCDict() : Function frees memory allocated by …\nZSTD_freeDDict() : Function frees memory allocated with …\nZSTD_generateSequences() : Generate sequences using …\nBlock functions produce and decode raw zstd blocks, …\nZSTD_getCParams() : @return ZSTD_compressionParameters …\nZSTD_getDecompressedSize() : NOTE: This function is now …\nZSTD_getDictID_fromCDict() : Provides the dictID of the …\nZSTD_getDictID_fromDDict() : Provides the dictID of the …\nZSTD_getDictID_fromDict() : Provides the dictID stored …\nZSTD_getDictID_fromFrame() : Provides the dictID required …\nZSTD_getFrameHeader() : decode Frame Header, or requires …\nZSTD_getFrameHeader_advanced() : same as …\nZSTD_getParams() : same as ZSTD_getCParams(), but @return …\nStreaming\nStreaming\nEquivalent to:\nZSTD_initCStream_advanced() : This function is deprecated, …\nZSTD_initCStream_srcSize() : This function is deprecated, …\nZSTD_initCStream_usingCDict() : This function is …\nZSTD_initCStream_usingCDict_advanced() : This function is …\nZSTD_initCStream_usingDict() : This function is …\nThis function is deprecated, and is equivalent to:\nThis function is deprecated, and is equivalent to:\nZSTD_initStatic*() : Initialize an object using a …\nZSTD_isFrame() : Tells if the content of <code>buffer</code> starts …\n&lt; Automatically determine the compression mode based on …\n&lt; Always attempt Huffman compression. Uncompressed …\n&lt; Always emit uncompressed literals.\nZSTD_mergeBlockDelimiters() : Given an array of …\nZSTD_resetCStream() : This function is deprecated, and is …\nThis function is deprecated, and is equivalent to:\nZSTD_sizeof_*() : These functions give the <em>current</em> memory …\nAdvanced compression API\nZSTD_toFlushNow() : Tell how many bytes are ready to be …\nZSTD_versionNumber() : Return runtime library version, the …\nZSTD_versionString() : Return runtime library version, …\nZSTD_writeSkippableFrame() : Generates a zstd skippable …\n&lt; fully searched segment : larger == more compression, …\n&lt; 1: generate a 32-bits checksum using XXH64 algorithm at …\n&lt; 1: content size will be in frame header (when known)\n&lt; start of output buffer\n&lt; start of output buffer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n&lt; dispatch table : larger == faster, more memory\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n&lt; match length searched : larger == faster decompression, …\n&lt; 1: no dictID will be saved into frame header (dictID is …\n&lt; position where reading stopped. Will be updated. …\n&lt; position where writing stopped. Will be updated. …\n&lt; position where reading stopped. Will be updated. …\n&lt; position where writing stopped. Will be updated. …\n&lt; nb of searches : larger == more compression, slower\n&lt; size of input buffer\n&lt; size of output buffer\n&lt; size of input buffer\n&lt; size of output buffer\n&lt; start of input buffer\n&lt; start of input buffer\n&lt; see ZSTD_strategy definition above\n&lt; acceptable match size for optimal parser (only) : larger …\n&lt; largest match distance : larger == more compression, …")