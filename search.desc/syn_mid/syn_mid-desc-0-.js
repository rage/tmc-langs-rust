searchState.loadedDescShard("syn_mid", 0, "Providing the features between “full” and “derive” …\nA braced block containing Rust statements.\nA single field in a struct pattern.\nAn argument in a function signature: the <code>n: usize</code> in …\nA pattern that binds a new variable: …\nA free-standing function: …\nA pattern in a local binding, function signature, match …\nA pattern that binds a new variable: …\nA reference pattern: <code>&amp;mut var</code>.\nThe dots in a tuple pattern: <code>[0, 1, ..]</code>.\nA struct or struct variant pattern: <code>Variant { x, y, .. }</code>.\nA tuple pattern: <code>(a, b)</code>.\nA tuple struct or tuple variant pattern: …\nA type ascription pattern: <code>foo: f64</code>.\nA pattern that matches any value: <code>_</code>.\nA path pattern like <code>Color::Red</code>.\nThe <code>self</code> argument of an associated method, whether taken …\nThe <code>self</code> argument of an associated method, whether taken …\nA reference pattern: <code>&amp;mut var</code>.\nA function signature in a trait or implementation: …\nA struct or struct variant pattern: <code>Variant { x, y, .. }</code>.\nA tuple pattern: <code>(a, b)</code>.\nA tuple struct or tuple variant pattern: …\nA type ascription pattern: <code>foo: f64</code>.\nA function argument accepted by pattern and type.\nThe variadic argument of a foreign function.\nA pattern that matches any value: <code>_</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse a pattern that does <em>not</em> involve <code>|</code> at the top level.\nStatements in a block")