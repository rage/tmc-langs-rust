searchState.loadedDescShard("libloading", 0, "A memory-safer wrapper around system dynamic library …\nCould not create a new CString.\nCould not create a new CString from bytes with trailing …\nThe <code>dlclose</code> call failed.\nThe <code>dlclose</code> call failed and system did not report an error.\nThe <code>dlopen</code> call failed.\nThe <code>dlopen</code> call failed and system did not report an error.\nThe <code>dlsym</code> call failed.\nThe <code>dlsym</code> call failed and system did not report an error.\nErrors.\nThe <code>FreeLibrary</code> call failed.\nThe <code>FreeLibrary</code> call failed and system did not report an …\nThe <code>GetModuleHandleExW</code> call failed.\nThe <code>GetModuleHandleExW</code> call failed and system did not …\nThe <code>GetProcAddress</code> call failed.\nThe <code>GetProcAddressUnknown</code> call failed and system did not …\nThe requested type cannot possibly work.\nA loaded dynamic library.\nThe <code>LoadLibraryW</code> call failed.\nThe <code>LoadLibraryW</code> call failed and system did not report an …\nSymbol from a library.\nProject changelog\nUnload the library.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWrap the <code>os::platform::Symbol</code> into this safe wrapper.\nGet a pointer to function or static variable by symbol …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the wrapped <code>os::platform::Symbol</code>.\nConverts a library name to a filename generally …\nLift Option out of the symbol.\nFind and load a dynamic library.\nUnsafe, platform specific bindings to dynamic library …\nThe source error.\nThe source error.\nThe source error.\nThe source error.\nThe source error.\nThe source error.\nThe source error.\nThe source error.\nThe source error.\nRelease 0.3.0 (2016-07-27)\nRelease 0.3.1 (2016-10-01)\nRelease 0.3.2 (2017-02-10)\nRelease 0.3.3 (2017-03-25)\nRelease 0.3.4 (2017-03-25)\nRelease 0.4.0 (2017-05-01)\nRelease 0.4.1 (2017-08-29)\nRelease 0.4.2 (2017-09-24)\nRelease 0.4.3 (2017-12-07)\nRelease 0.5.0 (2018-01-11)\nRelease 0.5.1 (2019-06-01)\nRelease 0.5.2 (2019-07-07)\nRelease 0.6.0 (2020-04-05)\nRelease 0.6.1 (2020-04-15)\nRelease 0.6.2 (2020-05-06)\nRelease 0.6.3 (2020-08-22)\nRelease 0.6.4 (2020-10-10)\nRelease 0.6.5 (2020-10-23)\nRelease 0.6.6 (2020-12-03)\nRelease 0.6.7 (2021-01-14)\nUNIX implementation of dynamic library loading.\nA platform-specific counterpart of the cross-platform …\nMake loaded symbols available for resolution globally.\nPerform lazy binding.\nLoad symbols into an isolated namespace.\nPerform eager binding.\nSymbol from a library.\nUnload the library.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a raw handle returned by <code>dlopen</code>-family of calls to …\nGet a pointer to function or static variable by symbol …\nGet a pointer to function or static variable by symbol …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert the <code>Library</code> to a raw handle.\nConvert the loaded Symbol into a raw pointer.\nLift Option out of the symbol.\nFind and eagerly load a shared library (module).\nFind and load an executable object file (shared library).\nEagerly load the <code>Library</code> representing the current …")