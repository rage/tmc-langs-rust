searchState.loadedDescShard("clap", 0, "<code>clap</code> is a simple-to-use, efficient, and full-featured …\nEssentially sets [<code>Arg::overrides_with(&quot;itself&quot;)</code>] for all …\nSpecifies that an unexpected positional argument, which …\nSpecifies that any invalid UTF-8 code points should <em>not</em> be …\nSpecifies that leading hyphens are allowed in argument …\nAllows vals that start with a ‘-’\nAllows one to implement two styles of CLIs where …\nAllows negative numbers to pass as values. This is similar …\nUsed to create a representation of a command line program …\nApplication level settings, which affect how <code>App</code> operates\nThe abstract representation of a command line argument. …\n<code>ArgGroup</code>s are a family of related arguments and way for …\nUsed to get information about the arguments that were …\nSpecifies that the help text should be displayed (and then …\nVarious settings that apply to arguments and may be set, …\nSpecifies that use of a valid argument negates subcommands …\nOccurs when the user provides two values which conflict …\nOccurs when using the <code>value_t!</code> and <code>values_t!</code> macros to …\nGenerates a .bash completion file for the Bourne Again …\nMakes <code>Arg::possible_values</code> case insensitive\nEnables colored output regardless of whether or not the …\nEnables colored output only when the output is going to a …\nDisables colored output no matter if the output is going …\nUses colorized help messages.\nDisplays the arguments and <code>SubCommand</code>s in the help message …\nDisables <code>-h</code> and <code>--help</code> <code>App</code> without affecting any of the …\nDisables the <code>help</code> subcommand\nDisables <code>-V</code> and <code>--version</code> <code>App</code> without affecting any of the …\nDisables the automatic collapsing of positional args into …\nDisables the automatic delimiting of values when <code>--</code> or …\nGenerates a completion file for Elvish\nOccurs when the user provides an empty value for an option …\nThe argument allows empty values such as <code>--option &quot;&quot;</code>\nContains the error value\nCommand Line Argument Parser Error\nCommand line argument parser kind of error\nGenerates a .fish completion file for the Friendly …\nRepresents a Format error (which is a part of <code>Display</code>). …\nThe argument should be propagated down through all child …\nSpecifies to use the version of the current command for …\nNot a true “error” as it means <code>--help</code> or similar was …\nSpecifies that this <code>SubCommand</code> should be hidden from help …\nThe argument should <strong>not</strong> be shown in help text\nThe argument should <strong>not</strong> be shown in long help text\nThe argument should <strong>not</strong> be shown in short help text\nHides the default value from the help string\nHides ENV values in the help message\nHides the possible values from the help string\nTells <code>clap</code> <em>not</em> to print possible values when displaying …\nTries to match unknown args to partial <code>subcommands</code> or …\nOccurs when the user provides an unrecognized <code>SubCommand</code> …\nOccurs when the user provides a value containing invalid …\nOccurs when an <code>Arg</code> has a set of possible values, and the …\nRepresents an [I/O error]. Can occur when writing to <code>stderr</code>…\nSpecifies that the arg is the last positional argument and …\nOccurs when either an argument or <code>SubCommand</code> is required, …\nOccurs when the user does not provide one or more required …\nOccurs when a subcommand is required (as defined by …\nThe argument may be used multiple times such as …\nPlaces the help string for all arguments on the line after …\nPrints the help text on the line after the argument\nSpecifies that the parser should not assume the first …\nContains the success value\nAn iterator for getting multiple values out of an argument …\nGenerates a completion file for PowerShell\n<strong>DEPRECATED</strong>: This setting is no longer required in order to …\nRequires the use of a value delimiter for all multiple …\nRequire options use <code>--option=val</code> syntax\nThe argument must be used\nShort hand for <code>Result</code> type\nDescribes which shell to produce a completions file for\nSpecifies that any invalid UTF-8 code points should be …\nThe abstract representation of a command line subcommand.\nAllows specifying that if no <code>SubCommand</code> is present at …\nSpecifies that the help text should be displayed (before …\nAllows <code>SubCommand</code>s to override all requirements of the …\nThe argument accepts a value, such as <code>--option &lt;value&gt;</code>\nOccurs when the user provides fewer values for an argument …\nOccurs when a user provides more values for an argument …\nSpecifies that the final positional argument is a “VarArg…\nOccurs when the user provides multiple values to an …\nGroups flags and options together, presenting a more …\nOccurs when a user provides a flag, option, argument or …\nOccurs when the user provides an unrecognized <code>SubCommand</code> …\nDetermines if the argument allows values to be grouped via …\nOccurs when the user provides a value for an argument with …\nAn iterator for getting multiple values out of an argument …\nNot a true “error” as it means <code>--version</code> or similar …\nDisables <code>-V</code> and <code>--version</code> for all <code>SubCommand</code>s (Defaults to …\nWill display a message “Press [ENTER]/[RETURN] to …\nOccurs when the user provides a different number of values …\nGenerates a completion file for the Z SHell (ZSH)\nCounts the number of comma-delimited expressions passed to …\nSets a string describing what the program does. This will …\nAdds additional help information to be displayed in …\nAllows adding a <code>SubCommand</code> alias, which function as “…\nAllows adding a <code>Arg</code> alias, which function as “hidden” …\nAllows adding <code>SubCommand</code> aliases, which function as “…\nAllows adding <code>Arg</code> aliases, which function as “hidden” …\nAllows values which start with a leading hyphen (<code>-</code>)\nAllows you to build the <code>App</code> instance from your Cargo.toml …\nAdds an argument to the list of valid possibilities.\nAdds an argument to this group by name\nConvenience macro to generate more complete enums with …\nA convenience method for adding a single argument from a …\nAdds multiple arguments to the list of valid possibilities\nAdds multiple arguments to this group by name\nAdds multiple arguments at once from a usage string, one …\nSets a string of author(s) that will be displayed to the …\nAdds additional help information to be displayed in …\nOverrides the system-determined binary name. This should …\nWhen used with <code>Arg::possible_values</code> it allows the argument …\nBuild <code>App</code>, <code>Arg</code>s, <code>SubCommand</code>s and <code>Group</code>s with Usage-string …\nSets a conflicting argument by name. I.e. when using this …\nSets the exclusion rules of this group. Exclusion (aka …\nThe same as <code>Arg::conflicts_with</code> but allows specifying …\nSets the exclusion rules of this group. Exclusion rules …\nAllows you to pull the authors for the app from your …\nAllows you to pull the description from your Cargo.toml at …\nAllows you to pull the name from your Cargo.toml at …\nAllows you to pull the version from your Cargo.toml at …\nSpecifies the value of the argument when <em>not</em> specified at …\nSpecifies the value of the argument if <code>arg</code> has been used …\nProvides a conditional default value in the exact same …\nSpecifies multiple values and conditions in the same …\nProvides multiple conditional default values in the exact …\nProvides a default value in the exact same manner as …\nAllows custom ordering of <code>SubCommand</code>s within the help …\nAllows custom ordering of args within the help message. …\nAllows an argument to accept explicitly empty values. An …\nSpecifies that if the value is not passed in as an …\nSpecifies that if the value is not passed in as an …\nPrints the error message and exits. If <code>Error::use_stderr</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new instance of <code>Arg</code> from a usage string. Allows …\nGenerate a completions file for a specified shell at …\nGenerate a completions file for a specified shell at …\nGet the name of the binary\nStarts the parsing process, upon a failed parse an error …\nStarts the parsing process. Like <code>App::get_matches</code> this …\nStarts the parsing process. A combination of …\nStarts the parsing process without consuming the <code>App</code> …\nStarts the parsing process. This method will return a …\nGet the name of the app\nSpecifies that an argument can be matched to all child …\nEnables a single setting that is propagated down through …\nEnables multiple settings which are propagated <em>down</em> …\nAdds an <code>ArgGroup</code> to the application. <code>ArgGroup</code>s are a …\nSpecifies the name of the <code>ArgGroup</code> the argument belongs to.\nAdds multiple <code>ArgGroup</code>s to the <code>App</code> at once.\nSpecifies the names of multiple <code>ArgGroup</code>’s the argument …\nSets a custom help message and overrides the …\nSets the short help text of the argument that will be …\nSets the help text for the auto-generated <code>help</code> argument.\nSets the <code>short</code> for the auto-generated <code>help</code> argument.\nHides an argument from help message output.\nHides an argument from long help message output.\nHides an argument from short help message output.\nSpecifies if the default value of an argument should be …\n@TODO @p2 @docs @release: write docs\nSpecifies if the possible values of an argument should be …\nSpecifies the index of a positional argument <strong>starting at</strong> 1.\nGets the starting index of the argument in respect to all …\nGets all indices of the argument in respect to all other …\nAny additional information passed along, such as the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if an argument was present at runtime, …\nChecks if one of the <code>ArgSettings</code> settings is set for the …\nThe type of error\nSpecifies that this arg is the last, or final, positional …\nSets the long version of the argument without the …\nSets a string describing what the program does. This will …\nSets the long help text of the argument that will be …\nSets a string of the version number to be displayed when …\nSets the max terminal width at which to wrap help …\nSpecifies the <em>maximum</em> number of values are for this …\nFormatted error message\nSpecifies the <em>minimum</em> number of values for this argument. …\nSpecifies that the argument may appear more than once. For …\nAllows more than one of the ‘Arg’s in this group to be …\nSets the program’s name. This will be displayed when …\nCreates a new instance of an application requiring a name. …\nWhen set to <code>true</code> the help string will be displayed on the …\nSpecifies how many values are required to satisfy this …\nReturns the number of times an argument was used at …\nSets a overridable argument by name. I.e. this argument …\nSets multiple mutually overridable arguments by name. I.e. …\nSpecifies a possible value for this argument, one at a …\nSpecifies a list of possible values for this argument. At …\nPrints the full help message to <code>io::stdout()</code> using a …\nPrints the full help message to <code>io::stdout()</code> using a …\nIndicates that all parameters passed after this should not …\nSpecifies that <em>multiple values</em> may only be set using the …\nRequires that options use the <code>--option=val</code> syntax (i.e. an …\nSets whether or not the argument is required by default. …\nSets the group as required or not. A required group will …\nAllows specifying that an argument is required …\nAllows specifying that an argument is required based on …\nSets an arg that override this arg’s required setting. …\nSets args that override this arg’s required setting. …\nSets args that override this arg’s required setting. …\nSets an argument by name that is required when this one is …\nSets the requirement rules of this group. This is not to …\nSets multiple arguments by names that are required when …\nSets the requirement rules of this group. This is not to …\nAllows a conditional requirement. The requirement will …\nAllows multiple conditional requirements. The requirement …\nSets one of the <code>ArgSettings</code> settings for the argument.\nSets the terminal width at which to wrap help messages. …\nEnables a single command, or <code>SubCommand</code>, level settings.\nEnables multiple command, or <code>SubCommand</code>, level settings\nSets the short version of the argument without the …\nAdds a <code>SubCommand</code> to the list of valid possibilities. …\nThis brings together <code>ArgMatches::subcommand_matches</code> and …\nBecause <code>Subcommand</code>s are essentially “sub-<code>App</code>s” they …\nBecause <code>Subcommand</code>s are essentially “sub-<code>App</code>s” they …\nAdds multiple subcommands to the list of valid …\nSpecifies that the argument takes a value at run time.\nSets the help template to be used, overriding the default …\nUnsets one of the <code>ArgSettings</code> settings for the argument.\nDisables a single command, or <code>SubCommand</code>, level setting.\nDisables multiple command, or <code>SubCommand</code>, level settings.\nSets a custom usage string to override the auto-generated …\nReturns a string slice of the usage statement for the <code>App</code> …\nSpecifies whether or not an argument should allow grouping …\nShould the message be written to <code>stdout</code> or not\nAllows one to perform a custom validation on the argument …\nWorks identically to Validator but is intended to be used …\nSpecifies the separator to use when values are clumped …\nSpecifies the name for value of option or positional …\nSpecify multiple names for values of option arguments. …\nGets the value of a specific option or positional argument …\nGets the lossy value of a specific argument. If the …\nGets the OS version of a string value of a specific …\nConvenience macro getting a typed value <code>T</code> where <code>T</code> …\nConvenience macro getting a typed value <code>T</code> where <code>T</code> …\nSpecifies a value that <em>stops</em> parsing multiple values of a …\nGets a <code>Values</code> struct which implements <code>Iterator</code> for values …\nGets the lossy values of a specific argument. If the …\nGets a <code>OsValues</code> struct which is implements <code>Iterator</code> for …\nConvenience macro getting a typed value <code>Vec&lt;T&gt;</code> where <code>T</code> …\nConvenience macro getting a typed value <code>Vec&lt;T&gt;</code> where <code>T</code> …\nA list of possible variants in <code>&amp;&#39;static str</code> form\nSets a string of the version number to be displayed when …\nSets the help text for the auto-generated <code>version</code> argument.\nSets the <code>short</code> for the auto-generated <code>version</code> argument.\nAllows adding a <code>SubCommand</code> alias that functions exactly …\nAllows adding a <code>Arg</code> alias that functions exactly like …\nAllows adding multiple <code>SubCommand</code> aliases that functions …\nAllows adding multiple <code>Arg</code> aliases that functions exactly …\nCreates a new instance of an application requiring a name, …\nCreate an error with a custom description.\nCreates a new instance of <code>Arg</code> using a unique string name. …\nCreates a new instance of <code>ArgGroup</code> using a unique string …\nCreates a new instance of a subcommand requiring a name. …\nWrites the full help message to the user to a <code>io::Write</code> …\nWrites the full help message to the user to a <code>io::Write</code> …\nWrites the version message to the user to a <code>io::Write</code> …\nWrites the version message to the user to a <code>io::Write</code> …")