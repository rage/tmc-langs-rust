searchState.loadedDescShard("neon", 0, "The Neon crate provides bindings for writing Node.js addons\nValues exported with <code>neon::export</code>\nProvides runtime access to the JavaScript engine.\nExposes the JavaScript event loop for scheduling …\nExport all values exported with <code>neon::export</code>\nRegister an item to be exported by the Neon addon\nReturns the argument unchanged.\nReferences to garbage-collected JavaScript values.\nCalls <code>U::from(self)</code>.\nMarks a function as the main entry point for …\nMetadata about the Neon version and build.\nTraits for working with JavaScript objects.\nConvenience module for the most common Neon imports.\nExposes JavaScript’s reflection API to Rust.\nAccess values exported with <code>neon::export</code>\nRepresents JavaScript exceptions as a Rust <code>Result</code> type.\nThread-local storage for JavaScript threads.\nRepresentations of JavaScript’s core builtin types.\nIndicates whether a function was called with <code>new</code>.\nAn <em>execution context</em>, which represents the current state …\nContext representing access to the JavaScript runtime\nAn execution context of a function call.\nA temporary lock of an execution context.\nAn execution context of module initialization.\nExtract a single argument from a unary function. See […\nExtract a single optional argument from a unary function. …\nExtract Rust data from the JavaScript arguments.\nExtract Rust data from the JavaScript arguments.\nProduces the <code>i</code>th argument and casts it to the type <code>V</code>, or …\nProduces the <code>i</code>th argument, or <code>None</code> if <code>i</code> is greater than or …\nConvenience method for creating an empty <code>JsArrayBuffer</code> …\nConvenience method for creating a <code>JsBoolean</code> value.\nConvenience method for wrapping a value in a <code>JsBox</code>.\nConvenience method for creating an empty <code>JsBuffer</code> value.\nReturns an unbounded channel for scheduling events to be …\nExecutes a computation in a new memory management scope …\nConvenience method for creating a <code>JsDate</code> value.\nConvenience method for creating an empty <code>JsArray</code> value.\nConvenience method for creating an empty <code>JsObject</code> value.\nCreates a direct instance of the <code>Error</code> class.\nExecutes a computation in a new memory management scope.\nConvenience method for exporting a Neon function from a …\nExports a JavaScript value from a Neon module.\nProduces a handle to a module’s exports object.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvenience method for looking up a global property by …\nProduces a handle to the JavaScript global object.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates if no arguments were passed to the function.\nIndicates whether the function was called with <code>new</code>.\nIndicates the number of arguments that were passed to the …\nLock the JavaScript engine, returning an RAII guard that …\nConstructs a new <code>Lock</code> and locks the VM. See also …\nConvenience method for creating a <code>JsNull</code> value.\nConvenience method for creating a <code>JsNumber</code> value.\nCreates a <code>Deferred</code> and <code>JsPromise</code> pair. The <code>Deferred</code> handle …\nCreates an instance of the <code>RangeError</code> class.\nConvenience method for creating a <code>JsString</code> value.\nCreates a <code>TaskBuilder</code> which can be used to schedule the …\nProduces a handle to the <code>this</code>-binding and attempts to …\nProduces a handle to the function’s <code>this</code>-binding.\nThrows a JS value.\nThrows a direct instance of the <code>Error</code> class.\nThrows an instance of the <code>RangeError</code> class.\nThrows an instance of the <code>TypeError</code> class.\nConvenience method for creating a <code>JsString</code> value.\nCreates an instance of the <code>TypeError</code> class.\nConvenience method for creating a <code>JsUndefined</code> value.\nChannel for scheduling Rust closures to execute on the …\nError returned by <code>JoinHandle::join</code> indicating the …\nAn owned permission to join on the result of a closure …\nError indicating that a closure was unable to be scheduled …\nNode asynchronous task builder\nSchedules a task to execute on the Node worker pool, …\nReturns a clone of the Channel instance that shares the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a boolean indicating if this <code>Channel</code> will prevent …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWaits for the associated closure to finish executing\nCreates an unbounded channel for scheduling closures on …\nConstruct a new task builder from an <code>execute</code> callback that …\nSchedules a task to execute on the Node worker pool and …\nPrevent the Node event loop from exiting while this <code>Channel</code>…\nSchedules a closure to execute on the JavaScript thread …\nSchedules a closure to execute on the JavaScript thread …\nAllow the Node event loop to exit while this <code>Channel</code> …\nAn error representing a failed downcast.\nThe result of a call to <code>Handle::downcast()</code>.\nContains the error value\nA handle to a JavaScript value that is owned by the …\nContains the success value\nA thread-safe handle that holds a reference to a …\nGets a reference to the inner value of a <code>JsBox</code>. This …\nClone a reference to the contained JavaScript object. This …\nAttempts to downcast a handle to another type, which may …\nAttempts to downcast a handle to another type, raising a …\nSafely drop a <code>Root&lt;T&gt;</code> without returning the referenced …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the referenced JavaScript object and allow it to be …\nTests whether this value is an instance of the given type.\nCreate a reference to a JavaScript object. The object will …\nReturns a <code>Region</code> representing a typed region of this …\nAccess the inner JavaScript object without consuming the …\nSafely upcast a handle to a supertype.\nThe Neon major version.\nThe Neon minor version.\nThe Neon patch version.\nThe Neon version.\nProduces a <code>semver::Version</code> data structure representing the …\nThe trait of all object types.\nA builder for accessing an object property.\nA property key in a JavaScript object.\nGets the property from the object as a method and binds …\nReturns the argument unchanged.\nGets the property from the object and attempts to convert …\nCalls <code>U::from(self)</code>.\nGets a property from the object as a method and binds <code>this</code> …\nUpdates the property key.\nCreate a <code>PropOptions</code> for accessing a property.\nSets the property on the object to a value converted from …\nSets the property on the object to a value computed from a …\nReturns the original object from which the property was …\nContains the error value\nContains the error value\nShorthand for a <code>NeonResult</code> that produces JavaScript values.\nThe result type for throwing APIs.\nContains the success value\nContains the success value\nExtension trait for converting Rust <code>Result</code> values into …\nA unit type indicating that the JavaScript thread is …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA JavaScript thread-local container that owns its …\nReturns the argument unchanged.\nGets the current value of the cell. Returns <code>None</code> if the …\nGets the current value of the cell, initializing it with …\nGets the current value of the cell, initializing it with …\nGets the current value of the cell, initializing it with …\nCalls <code>U::from(self)</code>.\nCreates a new local value. This method is <code>const</code>, so it can …\nAn error produced when constructing a date with an invalid …\nThe error kinds corresponding to <code>DateError</code>\nA controller struct that can be used to resolve or reject …\nContains the error value\nA trait for finalizing values owned by the main JavaScript …\nThe type of JavaScript <code>Array</code> objects.\nThe type of JavaScript <code>ArrayBuffer</code> objects.\nThe type of JavaScript <code>BigInt</code> values.\nThe type of JavaScript Boolean primitives.\nA JavaScript smart pointer object that owns Rust data.\nThe type of Node <code>Buffer</code> objects.\nThe type of JavaScript <code>Date</code> objects.\nThe type of JavaScript <code>Error</code> objects.\nThe type of JavaScript <code>Function</code> objects.\nThe type of JavaScript <code>null</code> primitives.\nThe type of JavaScript number primitives.\nThe type of JavaScript objects, i.e., the root of all …\nThe type of JavaScript <code>Promise</code> objects.\nThe type of JavaScript string primitives.\nThe family of JavaScript typed array types.\nThe type of JavaScript <code>undefined</code> primitives.\nThe type of any JavaScript value, i.e., the root of all …\nThe largest possible <code>Date</code> value, defined by ECMAScript.\nThe smallest possible <code>Date</code> value, defined by ECMAScript.\nContains the success value\nProduced for an initialization value greater than …\nAn error produced when constructing a string that exceeds …\nThe result of constructing a new <code>JsString</code>.\nProduced for an initialization value lesser than …\nThe trait shared by all JavaScript values.\nTypes for working with <code>JsBigInt</code>.\nCreate a <code>BindOptions</code> builder for calling this function.\nTypes and traits for working with binary buffers.\nReturns the <code>JsArrayBuffer</code> that owns the underlying storage …\nCalls this function.\nCreate a <code>CallOptions</code> for calling this function.\nCalls this function as a constructor.\nCreate a <code>ConstructOptions</code> for calling this function as a …\nGets a reference to the inner value of a <code>JsBox</code>. This …\nCreates a direct instance of the <code>Error</code> class.\nCalls this function for side effect, discarding its result.\nTraits and utilities for extract Rust data from JavaScript …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a typed array that views <code>buffer</code>.\nCreates a <code>BigInt</code> from a signed magnitude. The <code>BigInt</code> is …\nCreates a <code>BigInt</code> from an <code>i128</code>.\nCreates a <code>BigInt</code> from an <code>i64</code>.\nConstructs a typed array for the specified buffer region.\nConstructs a <code>JsBuffer</code> from a slice by copying its contents.\nConstructs a <code>JsArrayBuffer</code> from a slice by copying its …\nConstructs an instance from a slice by copying its …\nCreates a <code>BigInt</code> from a <code>u128</code>.\nCreates a <code>BigInt</code> from a <code>u64</code>.\nTypes and traits for working with JavaScript functions.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether the array is empty, equivalent to …\nChecks if the <code>Date</code>’s value is valid. A <code>Date</code> is valid if …\nReturns the length of the typed array, i.e. the number of …\nReturns the length of the array, equivalent to the …\nGets the number of <code>u64</code> digits in a <code>BigInt</code>\nConstructs a new <code>JsBox</code> containing <code>value</code>.\nConstructs a new <code>Buffer</code> object, safely zero-filled.\nConstructs a new <code>JsArrayBuffer</code> object, safely zero-filled.\nConstructs a new typed array of length <code>len</code>.\nCreates a new <code>Date</code>. It errors when <code>value</code> is outside the …\nCreates an <code>undefined</code> value.\nCreates a <code>null</code> value.\nCreates a Boolean value with value <code>b</code>.\nCreates a new <code>JsString</code> value from a Rust string by copying …\nCreates a new number with value <code>x</code>.\nCreates a new empty object.\nConstructs a new empty array of length <code>len</code>, equivalent to …\nReturns a new <code>JsFunction</code> implemented by <code>f</code>.\nCreates a new <code>Date</code> with lossy conversion for out of bounds …\nReturns the offset (in bytes) of the typed array from the …\nCreates an instance of the <code>RangeError</code> class.\nGets the sign from a <code>BigInt</code> and reads digits into a buffer.\nReturns a region of this buffer.\nReturns information about the backing buffer region for …\nReject a <code>JsPromise</code> with a JavaScript value\nCreates a nwe <code>Promise</code> immediately rejected with the given …\nResolve a <code>JsPromise</code> with a JavaScript value\nCreates a new <code>Promise</code> immediately resolved with the given …\nSettle the <code>JsPromise</code> by sending a closure across a <code>Channel</code> …\nReturns the size of the UTF-8 representation of this …\nReturns the size of the UTF-16 representation of this …\nGets a signed magnitude pair from a <code>BigInt</code>.\nReads an <code>i128</code> from a <code>BigInt</code>.\nReads an <code>i64</code> from a <code>BigInt</code>.\nReads a <code>u128</code> from a <code>BigInt</code>.\nReads a <code>u64</code> from a <code>BigInt</code>.\nConvert this JavaScript string into a <code>Vec&lt;u16&gt;</code> encoded as …\nCopies the array contents into a new <code>Vec</code> by iterating …\nTries to create a new <code>JsString</code> value from a Rust string by …\nSettle the <code>JsPromise</code> by sending a closure across a <code>Channel</code> …\nCreates an instance of the <code>TypeError</code> class.\nConstructs a new <code>Buffer</code> object with uninitialized memory\nGets the <code>Date</code>’s value. An invalid <code>Date</code> will return …\nReturns the value of this Boolean as a Rust <code>bool</code>.\nConvert this JavaScript string into a Rust <code>String</code>.\nReturns the value of this number as a Rust <code>f64</code>.\nReturns a new <code>JsFunction</code> implemented by <code>f</code> with specified …\nIndicates a lossless conversion from a <code>JsBigInt</code> to a Rust …\nIndicates if a <code>JsBigInt</code> is positive or negative\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the lossy value read from a <code>BigInt</code>. It may be …\nA marker trait for all possible element types of binary …\nAn error returned by <code>TypedArray::try_borrow</code> or …\nWraps binary data immutably borrowed from a JavaScript …\nWraps binary data mutably borrowed from a JavaScript value.\nRepresents a typed region of an <code>ArrayBuffer</code>.\nThe internal Node-API enum value for this binary type.\nA trait allowing Rust to borrow binary data from the …\nStatically checked mutable borrow of binary data.\nStatically checked immutable borrow of binary data.\nReturns the handle to the region’s buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs an instance from a slice by copying its …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of elements of type <code>T</code> in the region.\nReturns the starting byte offset of the region.\nReturns the size, in bytes, of the allocated binary data.\nReturns the size of the region in bytes, which is equal to …\nConstructs a typed array for this buffer region.\nDynamically checked immutable borrow of binary data, …\nDynamically checked mutable borrow of binary data, …\nWrapper for converting between bytes and <code>JsArrayBuffer</code>\nWrapper for converting between a Rust <code>[i64]</code> array type and …\nWrapper for converting between a Rust <code>[u64]</code> array type and …\nWrapper to extract <code>T</code> from a <code>JsBox&lt;T&gt;</code> or create a <code>JsBox</code> …\nWrapper for converting between bytes and <code>JsBuffer</code>\nWrapper for converting between <code>f64</code> and <code>JsDate</code>\nError that implements <code>TryIntoJs</code> and can produce specific …\nWrapper for converting between a Rust <code>[f32]</code> array type and …\nWrapper for converting between a Rust <code>[f64]</code> array type and …\nTrait specifying values that may be extracted from …\nWrapper for converting between a Rust <code>[i16]</code> array type and …\nWrapper for converting between a Rust <code>[i32]</code> array type and …\nWrapper for converting between a Rust <code>[i8]</code> array type and …\nExtract Rust data from a JavaScript value\nConvert Rust data into a JavaScript value\nError returned when a JavaScript value is not the type …\nWrapper for converting between a Rust <code>[u16]</code> array type and …\nWrapper for converting between a Rust <code>[u32]</code> array type and …\nWrapper for converting between a Rust <code>[u8]</code> array type and …\nThe type of JavaScript value that will be created\nGet a reference to the underlying <code>cause</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSame as <code>TryFromJs</code>, but all errors are converted to …\nSame as <code>TryFromJs</code>, but all errors are converted to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the <code>std::error::Error</code> cause\nCheck if error is a <code>RangeError</code>\nCheck if error is a <code>TypeError</code>\nCreate a new <code>Error</code> from a <code>cause</code>\nCreate a <code>RangeError</code>\nExtract this Rust type from a JavaScript value\nConvert <code>self</code> into a JavaScript value\nCreate a <code>TypeError</code>\nWraps a closure that will be lazily evaluated when …\nThe trait for specifying arguments for a function call. …\nA builder for making a JavaScript function call like …\nA builder for making a JavaScript function call like …\nA builder for making a JavaScript constructor call like …\nThe trait for specifying values to be converted into …\nMake the function call. If the function returns without …\nMake the constructor call. If the function returns without …\nAdd an argument to the arguments list.\nAdd an argument to the arguments list.\nAdd an argument to the arguments list.\nAdd an argument to the arguments list, computed from a …\nReplaces the arguments list with the given arguments.\nReplaces the arguments list with the given arguments.\nReplaces the arguments list with the given arguments.\nReplaces the arguments list with a list computed from a …\nMake the function call. If the function returns without …\nMake the function call as a constructor. If the function …\nMake the function call for side effect, discarding the …\nMake the function call for side effect, discarding the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the value of <code>this</code> for the function call.\nSet the value of <code>this</code> for the function call.")