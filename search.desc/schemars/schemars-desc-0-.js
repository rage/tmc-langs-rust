searchState.loadedDescShard("schemars", 0, "Schemars\nA type which can be described as a JSON Schema document.\nDerive macro for <code>JsonSchema</code> trait.\nA JSON Schema.\nThe main type used to generate JSON Schemas.\nIf the <code>Schema</code>’s underlying JSON value is a bool, returns …\nIf the <code>Schema</code>’s underlying JSON value is an object, …\nIf the <code>Schema</code>’s underlying JSON value is an object, …\nBorrows the <code>Schema</code>’s underlying JSON value.\nConstants associated with JSON Schema generation.\nConverts the <code>Schema</code> (if it wraps a bool value) into an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nJSON Schema generator and settings.\nIf the <code>Schema</code>’s underlying JSON value is an object, gets …\nIf the <code>Schema</code>’s underlying JSON value is an object, gets …\nWhether JSON Schemas generated for this type should be …\nInserts a property into the schema, replacing any previous …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates a JSON Schema for this type.\nConstruct a <code>Schema</code> from a JSON literal. This can either be …\nCreates a new schema object with a single string property …\nIf the <code>Schema</code>’s underlying JSON value is an object, …\nIf the <code>Schema</code>’s underlying JSON value is an object, …\nIf the <code>Schema</code>’s underlying JSON value is an object, …\nGenerates a <code>Schema</code> for the given type using default …\nGenerates a <code>Schema</code> for the given example value using …\nReturns a string that uniquely identifies the schema …\nThe name of the generated JSON Schema.\nReturns the <code>Schema</code>’s underlying JSON value.\nContains the <code>Transform</code> trait, used to modify a constructed …\nKnown values of the <code>$schema</code> property.\nThe mata-schema for JSON Schema Draft 7 (…\nThe mata-schema for JSON Schema 2019-09 (…\nThe mata-schema for JSON Schema 2020-12 (…\nThe mata-schema for OpenAPI 3.0 schemas (…\nA setting to specify whether generated schemas should …\nA <code>Transform</code> which implements additional traits required to …\nThe main type used to generate JSON Schemas.\nSettings to customize how Schemas are generated.\nReturns a reference to the contract for the settings on …\nWhether the generated schemas should describe how types …\nThe default settings currently conform to JSON Schema …\nBorrows the collection of all non-inlined schemas that …\nMutably borrows the collection of all non-inlined schemas …\nA JSON pointer to the expected location of referenceable …\nAttempts to downcast the box to a concrete type.\nReturns some mutable reference to the inner transform if …\nReturns some reference to the inner transform if it is of …\nCreates <code>SchemaSettings</code> that conform to JSON Schema Draft 7.\nCreates <code>SchemaSettings</code> that conform to JSON Schema 2019-09.\nCreates <code>SchemaSettings</code> that conform to JSON Schema 2020-12.\nUpdates the settings to generate schemas describing how …\nUpdates the settings to generate schemas describing how …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInline all subschemas instead of using references.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>SchemaGenerator</code> using these settings.\nConsumes <code>self</code> and generates a JSON Schema for the type <code>T</code>.\nConsumes <code>self</code> and generates a JSON Schema for the given …\nReturns <code>true</code> if the inner transform is of type <code>T</code>.\nReturns true if <code>self</code> is the <code>Deserialize</code> contract.\nReturns true if <code>self</code> is the <code>Serialize</code> contract.\nThe URI of the meta-schema describing the structure of the …\nCreates a new <code>SchemaGenerator</code> using the given settings.\nCreates <code>SchemaSettings</code> that conform to OpenAPI 3.0.\nGenerates a JSON Schema for the type <code>T</code>.\nGenerates a JSON Schema for the given example value.\nBorrows the <code>SchemaSettings</code> being used by this …\nGenerates a JSON Schema for the type <code>T</code>, and returns either …\nReturns the collection of all non-inlined schemas that …\nA list of <code>Transform</code>s that get applied to generated root …\nReturns an iterator over the transforms being used by this …\nWhether to include enum variant names in their schema’s …\nModifies the <code>SchemaSettings</code> by calling the given function.\nAppends the given transform to the list of transforms for …\nAdds a <code>&quot;nullable&quot;: true</code> property to schemas that allow <code>null</code>…\nA helper struct that can wrap a non-recursive <code>Transform</code> …\nRestructures JSON Schema objects so that the <code>$ref</code> property …\nReplaces boolean JSON Schemas with equivalent object …\nReplaces the <code>const</code> schema property with a single-valued …\nRename the <code>prefixItems</code> schema property to <code>items</code>.\nReplaces the <code>unevaluatedProperties</code> schema property with …\nRemoves any <code>format</code> values that are not defined by the JSON …\nRemoves the <code>examples</code> schema property and (if present) set …\nTrait used to modify a constructed schema and optionally …\nWhen set to <code>true</code> (the default), a schema that has a type …\nValues of the <code>format</code> property in schemas that will always …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nWhether to read the schema’s <code>$schema</code> property to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhen set to <code>true</code> (the default), <code>&quot;null&quot;</code> will also be …\nWhen set to <code>true</code>, a schema’s <code>additionalProperties</code> …\nApplies the transform to the given <code>Schema</code>.\nApplies the given <code>Transform</code> to all direct subschemas of …")