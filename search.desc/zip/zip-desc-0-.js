searchState.loadedDescShard("zip", 0, "A library for reading and writing ZIP archives. ZIP is a …\nEncrypted using AES.\n128-bit AES encryption.\n192-bit AES encryption.\n256-bit AES encryption.\nAES variant used.\nCompress the file using BZIP2\nIdentifies the storage format used to compress a file …\nRepresentation of a moment in time.\nCompress the file using Deflate64. Decoding deflate64 is …\nCompress the file using Deflate\nCompress the file using LZMA\nThe compression methods which have been implemented.\nStore the file as is\nUnsupported compression method\nCompress the file using XZ\nThe file size at which a ZIP64 record becomes necessary.\nThe number of entries within a single zip necessary to …\nCompress the file using ZStandard\nGets the date portion of this datetime in the msdos …\nGet the day\nConstructs an ‘default’ datetime of 1980-01-01 00:00:00\nReturns the current time if possible, otherwise the …\ntypes for extra fields\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a DateTime from a specific date and time\nConverts an msdos (u16, u16) pair to a DateTime object\nConverts a OffsetDateTime object to a DateTime\nConverts a u16 to its corresponding CompressionMethod\nGet the hour\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether this date and time can be written to a …\nLength of the key for the given AES mode.\nGet the minute\nGet the month, where 1 = january and 12 = december\nTypes for reading ZIP archives\nError types that can be emitted from this library\nLength of the salt for the given AES mode.\nGet the second\nGets the time portion of this datetime in the msdos …\nConverts the DateTime to a OffsetDateTime structure\nConverts a CompressionMethod to a u16\nConverts an msdos (u16, u16) pair to a DateTime object if …\nUnstable APIs All APIs accessible by importing this module …\nTypes for creating ZIP archives\nGet the year. There is no epoch, i.e. 2018 will be …\nuse this to mark extra fields specified in the central …\nextended timestamp, as described in …\nextended timestamp, as described in …\ncontains one extra field\nmarker trait to denote the place where this extra field …\nuse this to mark extra fields specified in a local header\nInfo-ZIP Unicode Path Extra Field (0x7075) or Unicode …\nreturns the last access timestamp, if defined, as UNIX …\nreturns the creation timestamp, if defined, as UNIX epoch …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns the last modification timestamp, if defined, as …\ncreates an extended timestamp struct by reading the …\nVerifies the checksum and returns the content.\nHolds the AES information of a file in the zip archive\nThe offset of the start of the archive from the beginning …\nConfiguration for reading ZIP archives.\nTry to detect the archive offset automatically.\nUse the central directory length and offset to determine …\nA trait for exposing file metadata inside the zip.\nSpecify a fixed archive offset.\nZIP archive reader\nA struct for reading a zip file\nA struct for reading and seeking a zip file\nThe AES encryption mode\nAn offset into the reader to use to find the start of the …\nGet a contained file by index\nGet a contained file by index, decrypt with given password\nGet a contained file by index without decompressing it\nSearch for a file entry by index and return a seekable …\nSearch for a file entry by name\nSearch for a file entry by name, decrypt with given …\nSearch for a file entry by name and return a seekable …\nGet the starting offset of the zip central directory.\nGet the starting offset of the zip header in the central …\nGet the comment of the file\nGet the comment of the zip archive.\nGet the size of the file, in bytes, in the archive\nGet the compression method used to store the file\nGet the CRC32 hash of the original file\nGet the starting offset of the data of the compressed file\nTotal size of the files in the archive, if it can be …\nEnsure the file path is safe to use as a <code>Path</code>.\nGet if the files is encrypted or not\nGet the extra data of the zip header for this file\niterate through all extra fields\nExtract a Zip archive into a directory, overwriting files …\nReturns an iterator over all the file and directory names …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the verification value and salt for the AES …\nGet the file metadata\nGet the starting offset of the zip header for this file\nGet the index of a file entry by name, if it’s present.\nGet the index of a file entry by path, if it’s present.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap and return the inner reader object\nReturns whether the file is actually a directory\nWhether this zip archive contains no files\nReturns whether the file is a normal file (i.e. not a …\nReturns whether the file is actually a symbolic link\nGet the time the file was last modified\nNumber of files contained in this zip.\nRewrite the path, ignoring any path components with …\nGet the name of the file\nGet the name of a file entry, if it’s present.\nGet the name of the file, in the raw (internal) byte …\nRead a ZIP archive, collecting the files it contains.\nGet the offset from the beginning of the underlying reader …\nRead ZipFile structures from a non-seekable reader.\nThe salt\nGet the name of the file in a sanitized form. It truncates …\nGet the size of the file, in bytes, when uncompressed\nGet unix mode for the file\nThe verification key\nGet the version of the file\nRead a ZIP archive providing a read configuration, …\nError type for time parsing\nContains the error value\nspecified file not found in archive\ninvalid Zip archive: {0}\nThe password provided is incorrect\ni/o error: {0}\nContains the success value\nThe text used as an error when a password is required and …\nunsupported Zip archive: {0}\nError type for Zip\nGeneric result type with ZipError as its error variant\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHelper methods for reading unsigned integers in …\nHelper methods for writing unsigned integers in …\nConverts a path to the ZIP format (forward-slash-delimited …\nProvides high level API for reading from a stream.\nTypes for creating ZIP archives.\nAdditional metadata for the file.\nStream decoder for zip.\nVisitor for ZipStreamReader\nGet the comment of the file\nEnsure the file path is safe to use as a <code>Path</code>.\nExtract a Zip archive into a directory, overwriting files …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the file is actually a directory\nReturns whether the file is a regular file\nRewrite the path, ignoring any path components with …\nGet the name of the file\nGet the name of the file, in the raw (internal) byte …\nCreate a new ZipStreamReader\nGet unix mode for the file\nIterate over the stream and extract all file and their …\nThis function is guranteed to be called after all …\n<code>file</code> - contains the content of the file and most of the …\nUnstable methods for <code>FileOptions</code>.\nWrite the file with the given password using the …\nThe Extension for Extra Data and Central Extra Data\nFile options Extensions\nMetadata for a file to be written\nAdds Extra Data and Central Extra Data. It does not …\nSimple File Options. Can be copied and good for simple …\nZIP archive generator\nRemoves the file currently being written from the archive …\nAdd a directory entry.\nAdd a directory entry, taking a Path as argument.\nAdds an extra data field.\nAdds an extra data field, unless we detect that it’s …\nAdd a symlink entry.\nAdd a symlink entry, taking Paths to the location and …\nCentral Extra Data\nRemoves the extra data fields.\nSet the compression level for the new file\nSet the compression method for the new file\nAdds another copy of a file already in this archive. This …\nLike <code>deep_copy_file</code>, but uses Path arguments.\nConstruct a new FileOptions object\nExtra Data\nFinish the last file and write all other zip-structures\nWrite the zip file into the backing stream, then produce a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet ZIP archive comment.\nReturns the compression level currently set.\nGet ZIP archive comment.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if a file is currently open for writing.\nSet whether the new file’s compressed and uncompressed …\nSet the last modified time\nCopy over the entire contents of another archive verbatim.\nInitializes the archive.\nInitializes the archive from an existing ZIP archive, …\nInitializes the archive from an existing ZIP archive, …\nAdd a new file using the already compressed data from a …\nAdd a new file using the already compressed data from a …\nLike <code>raw_copy_file_to_path</code>, but uses Path arguments.\nSet ZIP archive comment.\nSet the file length and crc32 manually.\n<code>flush_on_finish_file</code> is designed to support a streaming …\nSet ZIP archive comment.\nAdds another entry to the central directory referring to …\nLike <code>shallow_copy_file</code>, but uses Path arguments.\nCreate a file in the archive and start writing its’ …\nStarts a file, taking a Path as argument.\nSet the permissions for the new file.\nSet the AES encryption parameters.\nSets the alignment to the given number of bytes.\nSets the size of the buffer used to hold the next block …")